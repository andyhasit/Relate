{"version":3,"sources":["module.js","BaseCollection.js","Collection.js","ItemChildrenRegister.js","ItemParentRegister.js","model-service.js","model.js","ParentChildRelationship.js","queued-response-db.js","relationship.js","util.js","value-register.js"],"names":["c","console","angular","module","factory","$q","BaseCollection","self","this","__index","__db","def","prototype","__postAndLoad","document","defered","defer","type","typeIdentifier","post","then","result","ok","log","get","id","docFromDb","resolve","loadDocumentFromDb","promise","util","Collection","db","singleItemName","fieldNames","options","itemName","collectionName","plural","dbDocumentType","__factoryFunction","factoryFunction","__items","__relationships","__fieldNames","slice","__fullFieldNames","push","inheritPrototype","registerRelationship","relationship","doc","item","copyFields","_id","getAccessFunctionDefinitions","getFuncDef","action","pluralise","queuedPromise","name","singleName","func","createAccessFunctionDefinition","cap","capitalizeFirstLetter","__get__","__all__","Object","keys","map","i","__find__","query","test","prop","filterIndex","__new__","data","deferred","newItem","__save__","put","_rev","rev","__delete__","childDeletions","forEach","respondToItemDeleted","all","remove","ItemChildrenRegister","parentCollection","childCollection","childAlias","parentAlias","__parentCollection","__childCollection","__cascadeDelete","cascadeDelete","__reverseIndex","parentId","newEntry","childrenIds","childId","getChildren","parentItem","indexEntry","__ensureIndexEntryHasLiveChildren","liveChildren","linkChildToParent","childItem","innerPromise","parentItemId","__unlinkChildFromPreviousParent","__addChildToIndexEntry","respondToParentDeleted","length","debug","respondToChildDeleted","arrayContains","Id","oldParentId","removeFromArray","ItemParentRegister","newIndexEntry","getParent","isUndefined","liveObject","service","ParentChildRelationship","initialize","__dataReady","dataReady","undefined","__initializeModel","printInfo","__collections","collection","accessFunc","ModelFunctionName","defineCollection","__registerDocumentTypeLoader","defineRelationship","relationshipType","fn","__relationshipDefinitionFunctions","apply","__createParentChildRelationship","parentCollectionName","parent","childCollectionName","child","itemParentRegister","itemChildrenRegister","__createAccessFunctions","__getQueuedFunction","collectionFunction","__getNonQueuedFunction","arguments","originalArgs","__lastPromiseInQueue","__dbDocumentTypeLoaders","allDocsDefer","allDocs","include_docs","attachments","rows","row","__addDocumentToCollection","err","when","parentChild","RelateModel","onDataReady","alert","ValueRegister","__parentCollectionName","__childCollectionName","__childAlias","__parentAlias","__parentDeleteInProgress","getParentFnName","getChildrenFnName","setChildParentFnName","__getParent__","__getChildren__","__setChildParent__","__respondToParentDeleted","__respondToChildDeleted","set","QueuedResponseDb","_db","queue","_nextId","_latestResolvedId","wrapPromise","dbCall","promiseId","nextId","hiddenPromise","returnPromise","queuePromise","response","promiseGotResolved","resolved","releasResolvedPromises","stop","entry","Relationship","propertyName","parentPopertyName","_parentCollection","_parentPopertyName","_convertFromDoc","value","getItem","_convertToDoc","_onItemRemove","_links","string","charAt","toUpperCase","array","l","index","indexOf","splice","filteredItems","Child","Parent","childProto","parentProto","source","target","fields","field","_register","key"],"mappings":"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","file":"relate.min.js","sourcesContent":["\"use strict\";\r\nvar c = console;\r\n\r\nangular.module('Relate', []);","\r\nangular.module('Relate').factory('BaseCollection', function($q) {\r\n  /*\r\n  A collection has an internal index of the objects in the database.\r\n  What it uses as keys and values is up to the derived class.\r\n  */\r\n  var BaseCollection = function()    {var self = this;\r\n    self.__index = null;\r\n    self.__db = null;\r\n  };\r\n  var def = BaseCollection.prototype;\r\n  \r\n  def.__postAndLoad = function(document)    {var self = this;\r\n    var defered = $q.defer();\r\n    document.type = self.typeIdentifier;\r\n    self.__db.post(document).then( function (result) {\r\n      if (result.ok) {\r\n        self.__db.get(result.id).then( function (docFromDb) {        \r\n          defered.resolve(self.loadDocumentFromDb(docFromDb));\r\n        });\r\n      } else {\r\n        console.log(result);\r\n        throw \"Error fetching data\";\r\n      }\r\n    });\r\n    return defered.promise;\r\n  };\r\n  \r\n  return BaseCollection;\r\n});","\r\nangular.module('Relate').factory('Collection', function(util, $q, BaseCollection) {\r\n  \r\n  var Collection = function(db, singleItemName, fieldNames, options)    {var self = this;\r\n    var options = options || {};\r\n    self.itemName = singleItemName;\r\n    self.collectionName = singleItemName; //This is how a relationship references collection\r\n    self.plural = options.plural || singleItemName + 's'\r\n    self.dbDocumentType = options.dbDocumentType || singleItemName;\r\n    self.__db = db;\r\n    self.__factoryFunction = options.factoryFunction || function(){};\r\n    self.__items = {};\r\n    self.__relationships = [];\r\n    self.__fieldNames = fieldNames.slice();\r\n    self.__fullFieldNames = fieldNames.slice();\r\n    self.__fullFieldNames.push('_id');\r\n    self.__fullFieldNames.push('_rev');\r\n  };\r\n  util.inheritPrototype(Collection, BaseCollection);\r\n  var def = Collection.prototype;\r\n\r\n  def.registerRelationship = function(relationship)    {var self = this;\r\n    self.__relationships.push(relationship);\r\n  };\r\n\r\n  def.loadDocumentFromDb = function(doc)    {var self = this;\r\n    var item = new self.__factoryFunction();\r\n    util.copyFields(doc, item, self.__fullFieldNames);\r\n    self.__items[doc._id] = item;\r\n    return item;\r\n  };\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        singleName = cap(self.itemName),\r\n        plural = cap(self.plural);\r\n    function getFuncDef(action, pluralise, queuedPromise) {\r\n      var name = pluralise? action + plural : action + singleName,\r\n          func = self['__' + action + '__'];\r\n      return util.createAccessFunctionDefinition(name, func, queuedPromise);\r\n    }\r\n    return [\r\n      getFuncDef('new', false, true),\r\n      getFuncDef('save', false, true),\r\n      getFuncDef('delete', false, true),\r\n      getFuncDef('get', false, false),\r\n      getFuncDef('find', true, false),\r\n      getFuncDef('all', true, false),\r\n    ]\r\n  };\r\n  \r\n  def.__get__ = function(id)    {var self = this;\r\n    return self.__items[id];\r\n  };\r\n  \r\n  def.__all__ = function()    {var self = this;\r\n    return Object.keys(self.__items).map(function(i){\r\n      return self.__items[i];\r\n    });\r\n  };\r\n\r\n  def.__find__ = function(query)    {var self = this;\r\n    /*\r\n    query can be:\r\n      a function returning true or false\r\n      an object like {name: 'deirdre'} -- which returns items whose properties match.\r\n      an empty object {} -- which returns all items.\r\n    TODO: what about parent properties?\r\n    */\r\n    var test;\r\n    if (typeof query === 'function') {\r\n      test = query;\r\n    } else if (typeof query === 'object') {\r\n      test = function(item) {\r\n        for (prop in query) {\r\n          if (item[prop] !== query[prop]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      throw 'Invalid argument for \"find\", must be an object or a function.';\r\n    }\r\n    return util.filterIndex(self.__items, test);\r\n  };\r\n  \r\n  def.__new__ = function(data)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(data, doc, self.__fieldNames);\r\n    self.__postAndLoad(doc).then(function (newItem) {\r\n      //TODO: link relationships...\r\n      deferred.resolve(newItem);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__save__ = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(item, doc, self.__fullFieldNames);\r\n    self.__db.put(doc).then(function (result) {\r\n      item._rev = result.rev;\r\n      deferred.resolve(item._rev);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__delete__ = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var childDeletions = [];\r\n    angular.forEach(self.__relationships, function(relationship) {\r\n      childDeletions.push(relationship.respondToItemDeleted(item, self));\r\n    });\r\n    $q.all(childDeletions).then(function() {\r\n      self.__db.remove(item).then(function (result) {\r\n        delete self.__items[item._id];\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  return Collection;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemChildrenRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemChildrenRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_child_' + childAlias + 's_of_' + parentAlias;\r\n    self.__db = db;\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || false;\r\n    self.__index = {};//format {parentId: {doc: Object, liveChildren: []}\r\n    self.__reverseIndex = {};//format {childId: parentId}\r\n  };\r\n  util.inheritPrototype(ItemChildrenRegister, BaseCollection);\r\n  var def = ItemChildrenRegister.prototype;\r\n  \r\n  def.loadDocumentFromDb = function(doc)     {var self = this;\r\n    var parentId = doc.parentId;\r\n    if (self.__index[parentId]) {\r\n      throw \"Found duplicate item children link in database.\"\r\n    }\r\n    var newEntry = {doc: doc};\r\n    self.__index[parentId] = newEntry;\r\n    angular.forEach(doc.childrenIds, function (childId) {\r\n      self.__reverseIndex[childId] = parentId;\r\n    });\r\n    return newEntry;\r\n  };\r\n\r\n  def.getChildren = function(parentItem)    {var self = this;\r\n    var indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n      return indexEntry.liveChildren;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[parentItemId],\r\n        innerPromise;\r\n    //Note: parentItemId and indexEntry could rightfully be null/undefined.\r\n    self.__unlinkChildFromPreviousParent(childItem).then(function() {\r\n      self.__reverseIndex[childItem._id] = parentItemId;\r\n      if (indexEntry) {\r\n        innerPromise = self.__addChildToIndexEntry(indexEntry, childItem);\r\n      } else {\r\n        innerPromise = self.__postAndLoad({\r\n          parentId: parentItem._id,\r\n          childrenIds: [childItem._id]\r\n        });\r\n      }\r\n      innerPromise.then(function () {\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToParentDeleted = function(parentItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      if (self.__cascadeDelete && indexEntry.doc.childrenIds.length > 0) {\r\n        debug(indexEntry);\r\n        throw 'Cannot delete parent object as it still has children';\r\n      } else {\r\n        self.__db.remove(indexEntry.doc).then(function() {\r\n          delete self.__index[parentItem._id];\r\n          deferred.resolve();\r\n        });\r\n      }\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    return self.__unlinkChildFromPreviousParent(childItem);\r\n  };\r\n\r\n  def.__addChildToIndexEntry = function(indexEntry, childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n    if (util.arrayContains(indexEntry.doc.childrenIds, childItem._id)) {\r\n      deferred.resolve();\r\n    } else {\r\n      indexEntry.doc.childrenIds.push(childItem.Id);\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        indexEntry.liveChildren.push(childItem),\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__unlinkChildFromPreviousParent = function(childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var oldParentId = self.__reverseIndex[childItem._id];\r\n    if (oldParentId) {\r\n      var indexEntry = self.__index[oldParentId];\r\n      util.removeFromArray(indexEntry.doc.childrenIds, childItem._id);\r\n      self.__reverseIndex[childItem._id] = null;\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n        util.removeFromArray(indexEntry.liveChildren, childItem);\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__ensureIndexEntryHasLiveChildren = function(indexEntry)    {var self = this;\r\n    var liveChildren = indexEntry.liveChildren;\r\n    if (!liveChildren) {\r\n      var liveChildren = [];\r\n      angular.forEach(indexEntry.doc.childrenIds, function (childId) {\r\n        liveChildren.push(self.__childCollection.__get__(childId));\r\n      });\r\n      indexEntry.liveChildren = liveChildren;\r\n    }\r\n  };\r\n\r\n  return ItemChildrenRegister;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemParentRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemParentRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_parent_' + parentAlias + '_of_' + childAlias;\r\n    self.__db = db;\r\n    self.__index = {};\r\n    self.__parentCollection = parentCollection;\r\n  };\r\n  util.inheritPrototype(ItemParentRegister, BaseCollection);\r\n  var def = ItemParentRegister.prototype;\r\n\r\n  def.loadDocumentFromDb = function(document)    {var self = this;\r\n    if (self.__index[document.childId]) {\r\n      throw \"Found duplicate item parent link in database.\"\r\n    }\r\n    var newIndexEntry = {document: document};\r\n    self.__index[document.childId] = newIndexEntry;\r\n    return newIndexEntry;\r\n  };\r\n  \r\n  def.getParent = function(childItem)    {var self = this;\r\n    var indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      if (angular.isUndefined(indexEntry.liveObject)) {\r\n        indexEntry.liveObject = self.__parentCollection.__get__(indexEntry.document.parentId) || null;\r\n      }\r\n      return indexEntry.liveObject;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      indexEntry.document.parentId = parentItemId;\r\n      self.__db.put(indexEntry.document).then(function (result) {\r\n        indexEntry.document._rev = result.rev;\r\n        indexEntry.liveObject = parentItem;\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      self.__postAndLoad({\r\n        parentId: parentItemId, \r\n        childId: childItem._id\r\n      }).then(function (result) {\r\n        deferred.resolve();\r\n      });      \r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        id = childItem._id,\r\n        indexEntry = self.__index[id];\r\n    if (indexEntry) {\r\n      self.__db.remove(indexEntry.document).then(function (result) {\r\n        delete self.__index[id];\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ItemParentRegister;\r\n});\r\n\r\n    ","\r\nangular.module('Relate').service('model', function($q, Collection, ParentChildRelationship) {\r\n  var self = this;\r\n  \r\n  self.initialize = function(db, query) {\r\n    self.__db = db;\r\n  };\r\n  \r\n  var __dataReady;\r\n  self.dataReady = function ()  {var self = this;\r\n    if (__dataReady === undefined) {\r\n      __dataReady = $q.defer();\r\n      self.__initializeModel().then( function () {\r\n        __dataReady.resolve();\r\n      });\r\n    }\r\n    return __dataReady.promise;\r\n  };\r\n  \r\n  self.printInfo = function ()  {var self = this;\r\n    angular.forEach(self.__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        console.log('model.' + accessFunc.ModelFunctionName);\r\n      });\r\n    });\r\n  };\r\n  \r\n  /************* MODEL DEFINITION FUNCTIONS *************/\r\n  \r\n  self.defineCollection = function(singleItemName, fieldNames, options)  {var self = this;\r\n    var collection = new Collection(self.__db, singleItemName, fieldNames, options);\r\n    self.__collections[collection.collectionName] = collection;\r\n    self.__registerDocumentTypeLoader(collection);\r\n    return collection;\r\n  };\r\n  \r\n  self.defineRelationship = function(options)  {var self = this;\r\n    var relationshipType = options.type;\r\n    var fn = self.__relationshipDefinitionFunctions[relationshipType];\r\n    if (typeof fn === 'function') {\r\n      return fn.apply(self, [options]);\r\n    } else {\r\n      throw '' + options.type +' is not a valid relationship type';\r\n    }\r\n  };\r\n  \r\n  self.__createParentChildRelationship = function(options)  {var self = this;\r\n    var parentCollectionName = options.parent;\r\n    var childCollectionName = options.child;\r\n    var parentCollection = self.__collections[parentCollectionName];\r\n    var childCollection = self.__collections[childCollectionName];\r\n    var relationship = new ParentChildRelationship(self.__db, parentCollection, childCollection, options);\r\n    self.__collections[relationship.collectionName] = relationship;\r\n    self.__registerDocumentTypeLoader(relationship.itemParentRegister);\r\n    self.__registerDocumentTypeLoader(relationship.itemChildrenRegister);\r\n    return relationship;\r\n  };\r\n  \r\n  \r\n  /************* COLLECTION ACCESS FUNCTIONALITY ************\r\n  \r\n    __createAccessFunctions() creates methods like:\r\n  \r\n      model.newTask({})\r\n      model.getProjectTasks(project)\r\n  \r\n    Query functions (getX, findX) return directly. Data changing functions (all other prefixed) return promises.\r\n    \r\n    Query data may be dirty while a promise is waiting to complete, so you need to do this:\r\n    \r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n    Data changing functions are queued internally, so you can do this.\r\n    model.newTask({});\r\n    model.newTask({});\r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n  */\r\n  \r\n  self.__createAccessFunctions = function ()  {var self = this;\r\n    angular.forEach(self.__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        var func;\r\n        if (accessFunc.queuedPromise) {\r\n          func = self.__getQueuedFunction(collection, accessFunc.collectionFunction);\r\n        } else {\r\n          func = self.__getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n        }\r\n        self[accessFunc.ModelFunctionName] = func;\r\n      });\r\n    });\r\n  };\r\n  \r\n  self.__getNonQueuedFunction = function (collection, collectionFunction)  {var self = this;\r\n    return function() {\r\n      return collectionFunction.apply(collection, arguments);\r\n    }\r\n  };\r\n  \r\n  self.__getQueuedFunction = function (collection, collectionFunction)  {var self = this;\r\n    return function() {\r\n      var originalArgs = arguments;\r\n      var deferred = $q.defer();\r\n      self.__lastPromiseInQueue.then( function() {\r\n        self.__lastPromiseInQueue = collectionFunction.apply(collection, originalArgs);\r\n        self.__lastPromiseInQueue.then(function(result) {\r\n          deferred.resolve(result);\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n  };\r\n  \r\n\r\n  /************* INITAL LOADING FUNCTIONALITY *************/\r\n  \r\n  self.__registerDocumentTypeLoader = function(collection)  {var self = this;\r\n    var dbDocumentType = collection.dbDocumentType;\r\n    if (dbDocumentType in self.__dbDocumentTypeLoaders) {\r\n      var claimedBy = self.__dbDocumentTypeLoaders[dbDocumentType];\r\n      throw 'More than one collection/relationship attempting to register dbDocumentType: \"' + dbDocumentType + '\".';\r\n    } else {\r\n      self.__dbDocumentTypeLoaders[dbDocumentType] = collection;\r\n    }\r\n  };\r\n  \r\n  self.__initializeModel = function ()  {var self = this;\r\n    var defer = $q.defer();\r\n    var allDocsDefer = self.__db.allDocs({\r\n      include_docs: true,\r\n      attachments: false\r\n    });\r\n    allDocsDefer.then(function (result) {\r\n      angular.forEach(result.rows, function(row){\r\n        self.__addDocumentToCollection(row.doc);\r\n      });\r\n      self.__createAccessFunctions();\r\n      defer.resolve();\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n    return defer.promise;\r\n  };\r\n  \r\n  self.__addDocumentToCollection = function (document)  {var self = this;\r\n    var dbDocumentType = document.type;\r\n    if (dbDocumentType) {\r\n      var collection = self.__dbDocumentTypeLoaders[dbDocumentType];\r\n      if (collection) {\r\n        collection.loadDocumentFromDb(document, dbDocumentType);\r\n      } else {\r\n        console.log(document);\r\n        console.log('Could not load document \\\"' + document._id + '\\\" as type was not recognised (' + dbDocumentType + ')');\r\n      }\r\n    } else {\r\n      //self.__db.remove(document);\r\n      throw('Could not load document \\\"' + document._id + '\\\" as it has no \\\"type\\\" field.');\r\n    }\r\n  };\r\n  \r\n  self.__collections = {};\r\n  self.__dbDocumentTypeLoaders = {};\r\n  self.__lastPromiseInQueue = $q.when();\r\n  self.__relationshipDefinitionFunctions = {\r\n    parentChild: self.__createParentChildRelationship,\r\n  };\r\n  \r\n});\r\n\r\n","\r\nangular.module('Relate').factory('RelateModel', function($q, Collection, ParentChildRelationship) {\r\n  \r\n  var RelateModel = function(db)  {var self = this;\r\n    self.__db = db;\r\n    self.__collections = {};\r\n    self.__dbDocumentTypeLoaders = {};\r\n    self.__lastPromiseInQueue = $q.when();\r\n    self.__relationshipDefinitionFunctions = {\r\n      parentChild: self.__createParentChildRelationship,\r\n    }\r\n  };\r\n  var def = RelateModel.prototype;\r\n    \r\n  var __dataReady;\r\n  def.onDataReady = function ()  {var self = this;\r\n    if (__dataReady === undefined) {\r\n      __dataReady = $q.defer();\r\n      self.__initializeModel().then( function () {\r\n        __dataReady.resolve();\r\n      });\r\n    }\r\n    return __dataReady.promise;\r\n  };\r\n  \r\n  def.printInfo = function ()  {var self = this;\r\n    angular.forEach(self.__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        console.log('model.' + accessFunc.ModelFunctionName);\r\n      });\r\n    });\r\n  };\r\n  \r\n  /************* MODEL DEFINITION FUNCTIONS *************/\r\n  \r\n  def.defineCollection = function(singleItemName, fieldNames, options)  {var self = this;\r\n    var collection = new Collection(self.__db, singleItemName, fieldNames, options);\r\n    self.__collections[collection.collectionName] = collection;\r\n    self.__registerDocumentTypeLoader(collection);\r\n    return collection;\r\n  };\r\n  \r\n  def.defineRelationship = function(options)  {var self = this;\r\n    var relationshipType = options.type\r\n    var fn = self.__relationshipDefinitionFunctions[relationshipType];\r\n    if (typeof fn === 'function') {\r\n      return fn.apply(self, [options]);\r\n    } else {\r\n      alert('fail');\r\n    }\r\n  };\r\n  \r\n  def.__createParentChildRelationship = function(options)  {var self = this;\r\n    var parentCollectionName = options.parent;\r\n    var childCollectionName = options.child;\r\n    var parentCollection = self.__collections[parentCollectionName];\r\n    var childCollection = self.__collections[childCollectionName];\r\n    var relationship = new ParentChildRelationship(self.__db, parentCollection, childCollection, options);\r\n    self.__collections[relationship.collectionName] = relationship;\r\n    self.__registerDocumentTypeLoader(relationship.itemParentRegister);\r\n    self.__registerDocumentTypeLoader(relationship.itemChildrenRegister);\r\n    return relationship;\r\n  };\r\n  \r\n  \r\n  /************* COLLECTION ACCESS FUNCTIONALITY ************\r\n  \r\n    __createAccessFunctions() creates methods like:\r\n  \r\n      model.newTask({})\r\n      model.getProjectTasks(project)\r\n  \r\n    Query functions (getX, findX) return directly. Data changing functions (all other prefixed) return promises.\r\n    \r\n    Query data may be dirty while a promise is waiting to complete, so you need to do this:\r\n    \r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n    Data changing functions are queued internally, so you can do this.\r\n    model.newTask({});\r\n    model.newTask({});\r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n  */\r\n  \r\n  def.__createAccessFunctions = function ()  {var self = this;\r\n    angular.forEach(self.__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        var func;\r\n        if (accessFunc.queuedPromise) {\r\n          func = self.__getQueuedFunction(collection, accessFunc.collectionFunction);\r\n        } else {\r\n          func = self.__getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n        }\r\n        self[accessFunc.ModelFunctionName] = func;\r\n      });\r\n    });\r\n  };\r\n  \r\n  def.__getNonQueuedFunction = function (collection, collectionFunction)  {var self = this;\r\n    return function() {\r\n      return collectionFunction.apply(collection, arguments);\r\n    }\r\n  };\r\n  \r\n  def.__getQueuedFunction = function (collection, collectionFunction)  {var self = this;\r\n    return function() {\r\n      var originalArgs = arguments;\r\n      var deferred = $q.defer();\r\n      self.__lastPromiseInQueue.then( function() {\r\n        self.__lastPromiseInQueue = collectionFunction.apply(collection, originalArgs);\r\n        self.__lastPromiseInQueue.then(function(result) {\r\n          deferred.resolve(result);\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n  };\r\n  \r\n\r\n  /************* INITAL LOADING FUNCTIONALITY *************/\r\n  \r\n  def.__registerDocumentTypeLoader = function(collection)  {var self = this;\r\n    var dbDocumentType = collection.dbDocumentType;\r\n    if (dbDocumentType in self.__dbDocumentTypeLoaders) {\r\n      var claimedBy = self.__dbDocumentTypeLoaders[dbDocumentType];\r\n      throw 'More than one collection/relationship attempting to register dbDocumentType: \"' + dbDocumentType + '\".';\r\n    } else {\r\n      self.__dbDocumentTypeLoaders[dbDocumentType] = collection;\r\n    }\r\n  };\r\n  \r\n  def.__initializeModel = function ()  {var self = this;\r\n    var defer = $q.defer();\r\n    var allDocsDefer = self.__db.allDocs({\r\n      include_docs: true,\r\n      attachments: false\r\n    });\r\n    allDocsDefer.then(function (result) {\r\n      angular.forEach(result.rows, function(row){\r\n        self.__addDocumentToCollection(row.doc);\r\n      });\r\n      self.__createAccessFunctions();\r\n      defer.resolve();\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n    return defer.promise;\r\n  };\r\n  \r\n  def.__addDocumentToCollection = function (document)  {var self = this;\r\n    var dbDocumentType = document.type;\r\n    if (dbDocumentType) {\r\n      var collection = self.__dbDocumentTypeLoaders[dbDocumentType];\r\n      if (collection) {\r\n        collection.loadDocumentFromDb(document, dbDocumentType);\r\n      } else {\r\n        console.log('Could not load document \\\"' + document._id + '\\\" as type was not recognised (' + dbDocumentType + ')');\r\n      }\r\n    } else {\r\n      //self.__db.remove(document);\r\n      throw('Could not load document \\\"' + document._id + '\\\" as it has no \\\"type\\\" field.');\r\n    }\r\n  };\r\n  \r\n  return RelateModel;\r\n});\r\n\r\n","\r\nangular.module('Relate').factory('ParentChildRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ParentChildRelationship = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__parentCollectionName = parentCollection.itemName;\r\n    self.__childCollectionName = childCollection.itemName;\r\n    self.__childAlias = options.childAlias || childCollection.plural;\r\n    self.__parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.collectionName = 'lnk_' + self.__parentAlias + '_' + self.__childAlias;\r\n    self.__parentDeleteInProgress = new ValueRegister();\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || true;\r\n    self.itemParentRegister = new ItemParentRegister(db, parentCollection, childCollection, options);\r\n    self.itemChildrenRegister = new ItemChildrenRegister(db, parentCollection, childCollection, options);\r\n    parentCollection.registerRelationship(self);\r\n    childCollection.registerRelationship(self);\r\n  };\r\n  var def = ParentChildRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        getParentFnName = 'get' + cap(self.__childCollectionName) + cap(self.__parentAlias),\r\n        getChildrenFnName = 'get' + cap(self.__parentCollectionName) + cap(self.__childAlias),\r\n        setChildParentFnName = 'set' + cap(self.__childCollectionName) + cap(self.__parentAlias);\r\n    return [\r\n      util.createAccessFunctionDefinition(getParentFnName, self.__getParent__),\r\n      util.createAccessFunctionDefinition(getChildrenFnName, self.__getChildren__),\r\n      util.createAccessFunctionDefinition(setChildParentFnName, self.__setChildParent__),\r\n    ];\r\n  };\r\n  \r\n  def.__getParent__ = function (childItem)    {var self = this;\r\n    return self.itemParentRegister.getParent(childItem);\r\n  };\r\n  \r\n  def.__getChildren__ = function (parentItem)    {var self = this;\r\n    return self.itemChildrenRegister.getChildren(parentItem);\r\n  };\r\n  \r\n  def.__setChildParent__ = function (childItem, parentItem)    {var self = this;\r\n    return $q.all([\r\n      self.itemParentRegister.linkChildToParent(parentItem, childItem), \r\n      self.itemChildrenRegister.linkChildToParent(parentItem, childItem)\r\n    ]);\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n    if (collection === self.__parentCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__childCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n  };\r\n  \r\n  def.__respondToParentDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__parentDeleteInProgress.set(item, true);\r\n    var childDeletions = [];\r\n    if (self.__cascadeDelete) {\r\n      angular.forEach(self.__getChildren__(item), function (childItem) {\r\n        childDeletions.push(self.__childCollection.__delete__(childItem));\r\n      });\r\n    }\r\n    //Note that __parentDeleteInProgress will be set to false before promises are all resolved (non critical)\r\n    self.__parentDeleteInProgress.set(item, false);\r\n    $q.all(childDeletions).then(function() {\r\n      self.itemChildrenRegister.respondToParentDeleted(item);\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__respondToChildDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer(),\r\n        childDeletions = [],\r\n        parentItem = self.__getParent__(item);\r\n    childDeletions.push(self.itemParentRegister.respondToChildDeleted(item));\r\n    /* This is to prevent many calls to unlinking children of a parent when the parent will \r\n    be deleted anyway. Just to save on db writes.\r\n    */\r\n    if (parentItem && !self.__parentDeleteInProgress.get(parentItem)) {\r\n      childDeletions.push(self.itemChildrenRegister.respondToChildDeleted(item));\r\n    }\r\n    $q.all(childDeletions).then(function() {\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ParentChildRelationship;\r\n});","\r\nangular.module('Relate').factory('QueuedResponseDb', function($q, ValueRegister) {\r\n  /*\r\n  post put get remove\r\n  */\r\n  var QueuedResponseDb = function(db) {\r\n    var self = this;\r\n    self._db = db;\r\n    self.queue = {};\r\n    self._nextId = 0;\r\n    self._latestResolvedId = 1;\r\n    \r\n    self.wrapPromise = function(dbCall, data) {\r\n      var promiseId = self.nextId();\r\n      var hiddenPromise = self._db[dbCall](data);\r\n      var returnPromise = $q.defer();\r\n      self.queuePromise(promiseId, returnPromise);\r\n      hiddenPromise.then(function(response) {\r\n        self.promiseGotResolved(promiseId, response);\r\n      });\r\n      return returnPromise.promise;\r\n    };\r\n    angular.forEach(['post', 'put', 'get', 'remove'], function (dbCall) {\r\n      self[dbCall] = function(data) {\r\n        return self.wrapPromise(dbCall, data);\r\n      }\r\n    });\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.nextId = function (){\r\n    this._nextId ++;\r\n    return this._nextId;\r\n  }\r\n  \r\n  QueuedResponseDb.prototype.queuePromise = function(promiseId, returnPromise) {\r\n    this.queue[promiseId] = {\r\n      returnPromise: returnPromise,\r\n      resolved: false\r\n    };\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.promiseGotResolved = function(promiseId, result) {\r\n    var promise = this.queue[promiseId]\r\n    promise['result'] = result;\r\n    promise.resolved = true;\r\n    this.releasResolvedPromises();\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.releasResolvedPromises = function() {\r\n    var stop = false; // encounteredUnresolvedPromiseOrReachedEndOfQueue\r\n    while (!stop) {\r\n      entry = this.queue[this._latestResolvedId]\r\n      if (entry && entry.resolved) {\r\n        entry.returnPromise.resolve(entry.result);\r\n        this._latestResolvedId ++;\r\n      } else {\r\n        stop = true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return QueuedResponseDb;\r\n});","/*\r\nNew way:\r\n\r\nSpecify one relationship per collection.\r\nIt knows of the other collection, and how the relationship behaves.\r\n\r\nThe model is responisble for passing complementary relationships to the collections.\r\n\r\nLinking:\r\n   collection ends up with methods:\r\n   setParent\r\n   addChild\r\n   removeChild\r\n   addTag\r\n   removeTag\r\n   \r\n  model.defineRelationship({type: 'parentChild'... })\r\n    r1 = parentChildRelationship(parent, child)\r\n    r2 = childParentRelationship(parent, child)\r\n    parentCollection.registerRelationship(r1)\r\n    parentCollection.registerRelationship(r2)\r\n    childCollection.registerRelationship(r1)\r\n    childCollection.registerRelationship(r2)\r\n  }\r\n  What does a relationship do:\r\n    create accessor functions (get, set)\r\n    respond to deletions\r\n    respond to new\r\n    \r\n    \r\n  Deletions:\r\n    if has child items: \r\n      delete:\r\n        chilren\r\n        parent of child links \r\n        children of parent\r\n    if has parent items:\r\n      delete:\r\n        parent of child links \r\n        children of parent\r\n    if many to many:\r\n      delete join only\r\n      \r\n    ...but parent child deletions could benefit from not having all the items stripped first. Do I care?\r\n    I could collate operations on the db side (i.e. collect changes to single objects, and flush them after a period)\r\n    \r\n    \r\n      \r\n*/\r\n\r\nangular.module('Relate').factory('ParentRelationshipNew', function($q) {\r\n\r\n  var Relationship = function(propertyName, parentCollection, parentPopertyName) {\r\n    this.propertyName = propertyName;\r\n    this._parentCollection = parentCollection;\r\n    this._parentPopertyName = parentPopertyName;\r\n  };\r\n  \r\n  Relationship.prototype._convertFromDoc = function(doc) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      this._parentCollection.getItem(value);\r\n    }\r\n  };\r\n  \r\n  Relationship.prototype._convertToDoc = function(value) {\r\n    return value.id;\r\n  };\r\n  \r\n  Relationship.prototype._onItemRemove = function(item) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      var parentItem = this._parentCollection.getItem(value);\r\n      if (parentItem) {\r\n        parentItem._links[this._parentPopertyName]\r\n      }\r\n    }\r\n  };\r\n  \r\n});","\r\n\r\n\r\nangular.module('Relate').service('util', function($q) {\r\n  var self = this;\r\n  \r\n  self.capitalizeFirstLetter = function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n  \r\n  self.createAccessFunctionDefinition = function(name, fn, queuedPromise) {\r\n    return {\r\n      ModelFunctionName: name,\r\n      collectionFunction: fn,\r\n      queuedPromise: queuedPromise\r\n    }\r\n  };\r\n    \r\n  self.arrayContains = function(array, item) {\r\n    var l = array.length\r\n    for(var i=0; i <= l; i++) {\r\n      if (item == array[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  self.removeFromArray = function(array, item) {\r\n    //will be unique in list.\r\n    var index = array.indexOf(item);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  };\r\n  \r\n  self.filterIndex = function(index, test) {\r\n    //accepts an object like array.\r\n    var filteredItems = [];\r\n    angular.forEach(index, function(item) {\r\n      if (test(item)) {\r\n        filteredItems.push(item);\r\n      }\r\n    });\r\n    return filteredItems;\r\n  };\r\n  \r\n  self.inheritPrototype = function(Child, Parent) {\r\n    var childProto = Child.prototype;\r\n    var parentProto = Parent.prototype;\r\n    for (var prop in parentProto) {\r\n      if (typeof parentProto[prop] == 'function') {\r\n        childProto[prop] = parentProto[prop];\r\n      }\r\n    }\r\n  };\r\n  \r\n  self.copyFields = function(source, target, fields)    {var self = this;\r\n    angular.forEach(fields, function(field) {\r\n      target[field] = source[field];\r\n    });\r\n  };\r\n  \r\n});\r\n","\r\nangular.module('Relate').factory('ValueRegister', function() {\r\n  //\r\n  var ValueRegister = function() {\r\n    this._register = {};\r\n  };\r\n  ValueRegister.prototype.set = function(key, value) {\r\n    this._register[key] = value;\r\n  };\r\n  ValueRegister.prototype.get = function(key) {\r\n    return this._register[key];\r\n  };\r\n  \r\n  return ValueRegister;\r\n});\r\n"],"sourceRoot":"/source/"}