{"version":3,"sources":["module.js","BaseCollection.js","Collection.js","ItemChildrenRegister.js","ItemParentRegister.js","model.js","ParentChildRelationship.js","queued-response-db.js","relationship.js","util.js","value-register.js"],"names":["c","console","angular","module","factory","$q","BaseCollection","self","this","__index","__db","dbDocumentType","def","prototype","__postAndLoad","document","defered","defer","type","post","then","result","ok","log","get","id","docFromDb","resolve","loadDocumentFromDb","promise","util","Collection","db","singleItemName","fieldNames","options","itemName","collectionName","plural","__factoryFunction","factoryFunction","__items","__relationships","__fieldNames","slice","__fullFieldNames","push","inheritPrototype","registerRelationship","relationship","doc","item","copyFields","_id","getAccessFunctionDefinitions","getFuncDef","action","pluralise","queuedPromise","name","singleName","func","createAccessFunctionDefinition","cap","capitalizeFirstLetter","__get__","__all__","Object","keys","map","i","__find__","query","test","prop","filterIndex","__new__","data","deferred","newItem","__save__","put","_rev","rev","__delete__","childDeletions","forEach","respondToItemDeleted","all","remove","ItemChildrenRegister","parentCollection","childCollection","childAlias","parentAlias","__parentCollection","__childCollection","__cascadeDelete","cascadeDelete","__reverseIndex","parentId","newEntry","childrenIds","childId","getChildren","parentItem","indexEntry","__ensureIndexEntryHasLiveChildren","liveChildren","linkChildToParent","childItem","innerPromise","parentItemId","__unlinkChildFromPreviousParent","__addChildToIndexEntry","respondToParentDeleted","length","debug","respondToChildDeleted","arrayContains","Id","oldParentId","removeFromArray","ItemParentRegister","newIndexEntry","getParent","isUndefined","liveObject","service","ParentChildRelationship","__createParentChildRelationship","parentCollectionName","parent","childCollectionName","child","__collections","__createAccessFunctions","functionDefinitions","accessFunc","__getQueuedFunction","collection","collectionFunction","__getNonQueuedFunction","ModelFunctionName","apply","arguments","originalArgs","__lastPromiseInQueue","__registerDocumentTypeLoader","__dbDocumentTypeLoaders","__initializeModel","loadQuery","__loadQuery","rows","row","__addDocumentToCollection","__createLinks","err","when","__relationshipDefinitionFunctions","initialize","allDocs","include_docs","attachments","__dataReady","dataReady","undefined","printInfo","defineCollection","defineRelationship","relationshipType","fn","parentChild","ValueRegister","__parentCollectionName","__childCollectionName","__childAlias","__parentAlias","__parentDeleteInProgress","itemParentRegister","itemChildrenRegister","getParentFnName","getChildrenFnName","setChildParentFnName","__getParent__","__getChildren__","__setChildParent__","createLinks","__respondToParentDeleted","set","__respondToChildDeleted","QueuedResponseDb","_db","queue","_nextId","_latestResolvedId","wrapPromise","dbCall","promiseId","nextId","hiddenPromise","returnPromise","queuePromise","response","promiseGotResolved","resolved","releasResolvedPromises","stop","entry","Relationship","propertyName","parentPopertyName","_parentCollection","_parentPopertyName","_convertFromDoc","value","getItem","_convertToDoc","_onItemRemove","_links","string","charAt","toUpperCase","array","l","index","indexOf","splice","filteredItems","Child","Parent","childProto","parentProto","source","target","fields","field","_register","key"],"mappings":"AAAA,YACA,IAAIA,GAAIC,OAERC,SAAQC,OAAO,aCFfD,QAAQC,OAAO,UAAUC,QAAQ,kBAAA,KAAkB,SAASC,GAK1D,GAAIC,GAAiB,WAAe,GAAIC,GAAOC,IAC7CD,GAAKE,QAAU,KACfF,EAAKG,KAAO,KACZH,EAAKI,eAAiB,MAEpBC,EAAMN,EAAeO,SAkBzB,OAhBAD,GAAIE,cAAgB,SAASC,GAAc,GAAIR,GAAOC,KAChDQ,EAAUX,EAAGY,OAYjB,OAXAF,GAASG,KAAOX,EAAKI,eACrBJ,EAAKG,KAAKS,KAAKJ,GAAUK,KAAM,SAAUC,GACvC,IAAIA,EAAOC,GAMT,KADArB,SAAQsB,IAAIF,GACN,qBALNd,GAAKG,KAAKc,IAAIH,EAAOI,IAAIL,KAAM,SAAUM,GACvCV,EAAQW,QAAQpB,EAAKqB,mBAAmBF,QAOvCV,EAAQa,SAGVvB,KC5BTJ,QAAQC,OAAO,UAAUC,QAAQ,cAAA,OAAA,KAAA,iBAAc,SAAS0B,EAAMzB,EAAIC,GAEhE,GAAIyB,GAAa,SAASC,EAAIC,EAAgBC,EAAYC,GAAa,GAAI5B,GAAOC,KAC5E2B,EAAUA,KACd5B,GAAK6B,SAAWH,EAChB1B,EAAK8B,eAAiBJ,EACtB1B,EAAK+B,OAASH,EAAQG,QAAUL,EAAiB,IACjD1B,EAAKI,eAAiBwB,EAAQxB,gBAAkBsB,EAChD1B,EAAKG,KAAOsB,EACZzB,EAAKgC,kBAAoBJ,EAAQK,iBAAmB,aACpDjC,EAAKkC,WACLlC,EAAKmC,mBACLnC,EAAKoC,aAAeT,EAAWU,QAC/BrC,EAAKsC,iBAAmBX,EAAWU,QACnCrC,EAAKsC,iBAAiBC,KAAK,OAC3BvC,EAAKsC,iBAAiBC,KAAK,QAE7BhB,GAAKiB,iBAAiBhB,EAAYzB,EAClC,IAAIM,GAAMmB,EAAWlB,SAyGrB,OAvGAD,GAAIoC,qBAAuB,SAASC,GAAkB,GAAI1C,GAAOC,IAC/DD,GAAKmC,gBAAgBI,KAAKG,IAG5BrC,EAAIgB,mBAAqB,SAASsB,GAAS,GAAI3C,GAAOC,KAChD2C,EAAO,GAAI5C,GAAKgC,iBAGpB,OAFAT,GAAKsB,WAAWF,EAAKC,EAAM5C,EAAKsC,kBAChCtC,EAAKkC,QAAQS,EAAIG,KAAOF,EACjBA,GAGTvC,EAAI0C,6BAA+B,WAIjC,QAASC,GAAWC,EAAQC,EAAWC,GACrC,GAAIC,GAAOF,EAAWD,EAASlB,EAASkB,EAASI,EAC7CC,EAAOtD,EAAK,KAAOiD,EAAS,KAChC,OAAO1B,GAAKgC,+BAA+BH,EAAME,EAAMH,GAPT,GAAInD,GAAOC,KACvDuD,EAAMjC,EAAKkC,sBACXJ,EAAaG,EAAIxD,EAAK6B,UACtBE,EAASyB,EAAIxD,EAAK+B,OAMtB,QACEiB,EAAW,OAAO,GAAO,GACzBA,EAAW,QAAQ,GAAO,GAC1BA,EAAW,UAAU,GAAO,GAC5BA,EAAW,OAAO,GAAO,GACzBA,EAAW,QAAQ,GAAM,GACzBA,EAAW,OAAO,GAAM,KAI5B3C,EAAIqD,QAAU,SAASxC,GAAQ,GAAIlB,GAAOC,IACxC,OAAOD,GAAKkC,QAAQhB,IAGtBb,EAAIsD,QAAU,WAAe,GAAI3D,GAAOC,IACtC,OAAO2D,QAAOC,KAAK7D,EAAKkC,SAAS4B,IAAI,SAASC,GAC5C,MAAO/D,GAAKkC,QAAQ6B,MAIxB1D,EAAI2D,SAAW,SAASC,GAAW,GAQ7BC,GARiClE,EAAOC,IAS5C,IAAqB,kBAAVgE,GACTC,EAAOD,MACF,CAAA,GAAqB,gBAAVA,GAUhB,KAAM,+DATNC,GAAO,SAAStB,GACd,IAAKuB,OAAQF,GACX,GAAIrB,EAAKuB,QAAUF,EAAME,MACvB,OAAO,CAGX,QAAO,GAKX,MAAO5C,GAAK6C,YAAYpE,EAAKkC,QAASgC,IAGxC7D,EAAIgE,QAAU,SAASC,GAAU,GAAItE,GAAOC,KACtCsE,EAAWzE,EAAGY,QACdiC,IAMJ,OALApB,GAAKsB,WAAWyB,EAAM3B,EAAK3C,EAAKoC,cAChCpC,EAAKO,cAAcoC,GAAK9B,KAAK,SAAU2D,GAErCD,EAASnD,QAAQoD,KAEZD,EAASjD,SAGlBjB,EAAIoE,SAAW,SAAS7B,GAAU,GAAI5C,GAAOC,KACvCsE,EAAWzE,EAAGY,QACdiC,IAMJ,OALApB,GAAKsB,WAAWD,EAAMD,EAAK3C,EAAKsC,kBAChCtC,EAAKG,KAAKuE,IAAI/B,GAAK9B,KAAK,SAAUC,GAChC8B,EAAK+B,KAAO7D,EAAO8D,IACnBL,EAASnD,QAAQwB,EAAK+B,QAEjBJ,EAASjD,SAGlBjB,EAAIwE,WAAa,SAASjC,GAAU,GAAI5C,GAAOC,KACzCsE,EAAWzE,EAAGY,QACdoE,IAUJ,OATAnF,SAAQoF,QAAQ/E,EAAKmC,gBAAiB,SAASO,GAC7CoC,EAAevC,KAAKG,EAAasC,qBAAqBpC,EAAM5C,MAE9DF,EAAGmF,IAAIH,GAAgBjE,KAAK,WAC1Bb,EAAKG,KAAK+E,OAAOtC,GAAM/B,KAAK,SAAUC,SAC7Bd,GAAKkC,QAAQU,EAAKE,KACzByB,EAASnD,cAGNmD,EAASjD,SAGXE,KC3HT7B,QAAQC,OAAO,UAAUC,QAAQ,wBAAA,OAAA,KAAA,iBAAwB,SAAS0B,EAAMzB,EAAIC,GAE1E,GAAIoF,GAAuB,SAAS1D,EAAI2D,EAAkBC,EAAiBzD,GAAa,GAAI5B,GAAOC,KAC7F2B,EAAUA,MACV0D,EAAa1D,EAAQ0D,YAAcD,EAAgBxD,SACnD0D,EAAc3D,EAAQ2D,aAAeH,EAAiBvD,QAC1D7B,GAAKI,eAAiB,aAAekF,EAAa,QAAUC,EAC5DvF,EAAKG,KAAOsB,EACZzB,EAAKwF,mBAAqBJ,EAC1BpF,EAAKyF,kBAAoBJ,EACzBrF,EAAK0F,gBAAkB9D,EAAQ+D,gBAAiB,EAChD3F,EAAKE,WACLF,EAAK4F,kBAEPrE,GAAKiB,iBAAiB2C,EAAsBpF,EAC5C,IAAIM,GAAM8E,EAAqB7E,SAiH/B,OA/GAD,GAAIgB,mBAAqB,SAASsB,GAAU,GAAI3C,GAAOC,KACjD4F,EAAWlD,EAAIkD,QACnB,IAAI7F,EAAKE,QAAQ2F,GACf,KAAM,iDAER,IAAIC,IAAYnD,IAAKA,EAKrB,OAJA3C,GAAKE,QAAQ2F,GAAYC,EACzBnG,QAAQoF,QAAQpC,EAAIoD,YAAa,SAAUC,GACzChG,EAAK4F,eAAeI,GAAWH,IAE1BC,GAGTzF,EAAI4F,YAAc,SAASC,GAAgB,GAAIlG,GAAOC,KAChDkG,EAAanG,EAAKE,QAAQgG,EAAWpD,IACzC,OAAIqD,IACFnG,EAAKoG,kCAAkCD,GAChCA,EAAWE,kBAMtBhG,EAAIiG,kBAAoB,SAASJ,EAAYK,GAAe,GAItDC,GAJ0DxG,EAAOC,KACjEsE,EAAWzE,EAAGY,QACd+F,EAAeP,EAAYA,EAAWpD,IAAM,KAC5CqD,EAAanG,EAAKE,QAAQuG,EAiB9B,OAdAzG,GAAK0G,gCAAgCH,GAAW1F,KAAK,WACnDb,EAAK4F,eAAeW,EAAUzD,KAAO2D,EAEnCD,EADEL,EACanG,EAAK2G,uBAAuBR,EAAYI,GAExCvG,EAAKO,eAClBsF,SAAUK,EAAWpD,IACrBiD,aAAcQ,EAAUzD,OAG5B0D,EAAa3F,KAAK,WAChB0D,EAASnD,cAGNmD,EAASjD,SAGlBjB,EAAIuG,uBAAyB,SAASV,GAAgB,GAAIlG,GAAOC,KAC3DsE,EAAWzE,EAAGY,OAElB,IADAyF,WAAanG,EAAKE,QAAQgG,EAAWpD,KACjCqD,WAAY,CACd,GAAInG,EAAK0F,iBAAmBS,WAAWxD,IAAIoD,YAAYc,OAAS,EAE9D,KADAC,OAAMX,YACA,sDAENnG,GAAKG,KAAK+E,OAAOiB,WAAWxD,KAAK9B,KAAK,iBAC7Bb,GAAKE,QAAQgG,EAAWpD,KAC/ByB,EAASnD,YAIf,MAAOmD,GAASjD,SAGlBjB,EAAI0G,sBAAwB,SAASR,GAAe,GAAIvG,GAAOC,IAC7D,OAAOD,GAAK0G,gCAAgCH,IAG9ClG,EAAIsG,uBAAyB,SAASR,EAAYI,GAAe,GAAIvG,GAAOC,KACtEsE,EAAWzE,EAAGY,OAWlB,OAVAV,GAAKoG,kCAAkCD,GACnC5E,EAAKyF,cAAcb,EAAWxD,IAAIoD,YAAaQ,EAAUzD,KAC3DyB,EAASnD,WAET+E,EAAWxD,IAAIoD,YAAYxD,KAAKgE,EAAUU,IAC1CjH,EAAKG,KAAKuE,IAAIyB,EAAWxD,KAAK9B,KAAK,WACjCsF,EAAWE,aAAa9D,KAAKgE,GAC7BhC,EAASnD,aAGNmD,EAASjD,SAGlBjB,EAAIqG,gCAAkC,SAASH,GAAe,GAAIvG,GAAOC,KACnEsE,EAAWzE,EAAGY,QACdwG,EAAclH,EAAK4F,eAAeW,EAAUzD,IAChD,IAAIoE,EAAa,CACf,GAAIf,GAAanG,EAAKE,QAAQgH,EAC9B3F,GAAK4F,gBAAgBhB,EAAWxD,IAAIoD,YAAaQ,EAAUzD,KAC3D9C,EAAK4F,eAAeW,EAAUzD,KAAO,KACrC9C,EAAKG,KAAKuE,IAAIyB,EAAWxD,KAAK9B,KAAK,WACjCb,EAAKoG,kCAAkCD,GACvC5E,EAAK4F,gBAAgBhB,EAAWE,aAAcE,GAC9ChC,EAASnD,gBAGXmD,GAASnD,SAEX,OAAOmD,GAASjD,SAGlBjB,EAAI+F,kCAAoC,SAASD,GAAgB,GAAInG,GAAOC,KACtEoG,EAAeF,EAAWE,YAC9B,KAAKA,EAAc,CACjB,GAAIA,KACJ1G,SAAQoF,QAAQoB,EAAWxD,IAAIoD,YAAa,SAAUC,GACpDK,EAAa9D,KAAKvC,EAAKyF,kBAAkB/B,QAAQsC,MAEnDG,EAAWE,aAAeA,IAIvBlB,KChITxF,QAAQC,OAAO,UAAUC,QAAQ,sBAAA,OAAA,KAAA,iBAAsB,SAAS0B,EAAMzB,EAAIC,GAExE,GAAIqH,GAAqB,SAAS3F,EAAI2D,EAAkBC,EAAiBzD,GAAa,GAAI5B,GAAOC,KAC3F2B,EAAUA,MACV0D,EAAa1D,EAAQ0D,YAAcD,EAAgBxD,SACnD0D,EAAc3D,EAAQ2D,aAAeH,EAAiBvD,QAC1D7B,GAAKI,eAAiB,cAAgBmF,EAAc,OAASD,EAC7DtF,EAAKG,KAAOsB,EACZzB,EAAKE,WACLF,EAAKwF,mBAAqBJ,EAE5B7D,GAAKiB,iBAAiB4E,EAAoBrH,EAC1C,IAAIM,GAAM+G,EAAmB9G,SAyD7B,OAvDAD,GAAIgB,mBAAqB,SAASb,GAAc,GAAIR,GAAOC,IACzD,IAAID,EAAKE,QAAQM,EAASwF,SACxB,KAAM,+CAER,IAAIqB,IAAiB7G,SAAUA,EAE/B,OADAR,GAAKE,QAAQM,EAASwF,SAAWqB,EAC1BA,GAGThH,EAAIiH,UAAY,SAASf,GAAe,GAAIvG,GAAOC,KAC7CkG,EAAanG,EAAKE,QAAQqG,EAAUzD,IACxC,OAAIqD,IACExG,QAAQ4H,YAAYpB,EAAWqB,cACjCrB,EAAWqB,WAAaxH,EAAKwF,mBAAmB9B,QAAQyC,EAAW3F,SAASqF,WAAa,MAEpFM,EAAWqB,YAEb,MAGTnH,EAAIiG,kBAAoB,SAASJ,EAAYK,GAAe,GAAIvG,GAAOC,KACjEsE,EAAWzE,EAAGY,QACd+F,EAAeP,EAAYA,EAAWpD,IAAM,KAC5CqD,EAAanG,EAAKE,QAAQqG,EAAUzD,IAgBxC,OAfIqD,IACFA,EAAW3F,SAASqF,SAAWY,EAC/BzG,EAAKG,KAAKuE,IAAIyB,EAAW3F,UAAUK,KAAK,SAAUC,GAChDqF,EAAW3F,SAASmE,KAAO7D,EAAO8D,IAClCuB,EAAWqB,WAAatB,EACxB3B,EAASnD,aAGXpB,EAAKO,eACHsF,SAAUY,EACVT,QAASO,EAAUzD,MAClBjC,KAAK,SAAUC,GAChByD,EAASnD,YAGNmD,EAASjD,SAGlBjB,EAAI0G,sBAAwB,SAASR,GAAe,GAAIvG,GAAOC,KACzDsE,EAAWzE,EAAGY,QACdQ,EAAKqF,EAAUzD,IACfqD,EAAanG,EAAKE,QAAQgB,EAO9B,OANIiF,IACFnG,EAAKG,KAAK+E,OAAOiB,EAAW3F,UAAUK,KAAK,SAAUC,SAC5Cd,GAAKE,QAAQgB,GACpBqD,EAASnD,YAGNmD,EAASjD,SAGX8F,KCrETzH,QAAQC,OAAO,UAAU6H,QAAQ,SAAA,KAAA,aAAA,0BAAS,SAAS3H,EAAI0B,EAAYkG,GA8DjE,QAASC,GAAgC/F,GACvC,GAAIgG,GAAuBhG,EAAQiG,OAC/BC,EAAsBlG,EAAQmG,MAC9B3C,EAAmB4C,EAAcJ,GACjCvC,EAAkB2C,EAAcF,EACpC,OAAO,IAAIJ,GAAwBvH,EAAMiF,EAAkBC,EAAiBzD,GA2B9E,QAASqG,GAAwBC,GAC/BvI,QAAQoF,QAAQmD,EAAqB,SAASC,GAC5C,GAAI7E,EAEFA,GADE6E,EAAWhF,cACNiF,EAAoBC,WAAYF,EAAWG,oBAE3CC,EAAuBF,WAAYF,EAAWG,oBAEvDtI,EAAKmI,EAAWK,mBAAqBlF,IAkBzC,QAASiF,GAAuBF,EAAYC,GAC1C,MAAO,YACL,MAAOA,GAAmBG,MAAMJ,EAAYK,YAIhD,QAASN,GAAoBC,EAAYC,GACvC,MAAO,YACL,GAAIK,GAAeD,UACfnE,EAAWzE,EAAGY,OAOlB,OANAkI,GAAqB/H,KAAM,WACzB+H,EAAuBN,EAAmBG,MAAMJ,EAAYM,GAC5DC,EAAqB/H,KAAK,SAASC,GACjCyD,EAASnD,QAAQN,OAGdyD,EAASjD,SAMpB,QAASuH,GAA6BR,GACpC,GAAIjI,GAAiBiI,EAAWjI,cAChC,IAAIA,IAAkB0I,GAAyB,CAC7BA,EAAwB1I,EACxC,MAAM,iFAAmFA,EAAiB,KAE1G0I,EAAwB1I,GAAkBiI,EAI9C,QAASU,KACP,GAAIrI,GAAQZ,EAAGY,QACXsI,EAAYC,GAUhB,OATAD,GAAUnI,KAAK,SAAUC,GACvBnB,QAAQoF,QAAQjE,EAAOoI,KAAM,SAASC,GACpCC,EAA0BD,EAAIxG,OAEhC0G,IACA3I,EAAMU,YALR4H,SAMS,SAAUM,GACjB5J,QAAQsB,IAAIsI,KAEP5I,EAAMY,QAGf,QAAS8H,GAA0B5I,GACjC,GAAIJ,GAAiBI,EAASG,IAC9B,KAAIP,EAUF,KAAM,4BAA+BI,EAASsC,IAAM,8BATpD,IAAIuF,GAAaS,EAAwB1I,EACrCiI,GACFA,EAAWhH,mBAAmBb,EAAUJ,IAExCV,QAAQsB,IAAIR,GACZd,QAAQsB,IAAI,4BAA+BR,EAASsC,IAAM,iCAAoC1C,EAAiB,MAQrH,QAASiJ,KACP1J,QAAQoF,QAAQ5C,EAAiB,SAASO,MAtL5C,GACIvC,GACA8I,EAFAjJ,EAAMC,KAGN+H,KACA7F,KACA2G,KACAF,EAAuB9I,EAAGyJ,OAC1BC,IAEJxJ,GAAKyJ,WAAa,SAAShI,EAAIwC,GAC7B9D,EAAOsB,EACPwH,EAAchF,GAAS,WACrB,MAAO9D,GAAKuJ,SACVC,cAAc,EACdC,aAAa,KAKnB,IAAIC,EACJ7J,GAAK8J,UAAY,WAOf,MANoBC,UAAhBF,IACFA,EAAc/J,EAAGY,QACjBqI,IAAoBlI,KAAM,WACxBgJ,EAAYzI,aAGTyI,EAAYvI,SAGrBtB,EAAKgK,UAAY,WACfrK,QAAQoF,QAAQiD,EAAe,SAASK,GACtC1I,QAAQoF,QAAQsD,EAAWtF,+BAAgC,SAASoF,GAClEzI,QAAQsB,IAAI,SAAWmH,EAAWK,wBAOxCxI,EAAKiK,iBAAmB,SAASvI,EAAgBC,EAAYC,GAC3D,GAAIyG,GAAa,GAAI7G,GAAWrB,EAAMuB,EAAgBC,EAAYC,EAIlE,OAHAoG,GAAcK,EAAWvG,gBAAkBuG,EAC3CQ,EAA6BR,GAC7BJ,EAAwBI,EAAWtF,gCAC5BsF,GAGTrI,EAAKkK,mBAAqB,SAAStI,GACjC,GAAIuI,GAAmBvI,EAAQjB,KAC3ByJ,EAAKZ,EAAkCW,EAC3C,IAAkB,kBAAPC,GAKT,KAAM,GAAKxI,EAAQjB,KAAM,mCAJzB+B,cAAe0H,EAAG3B,MAAMzI,GAAO4B,IAC/BqG,EAAwBvF,aAAaK,gCACrCZ,EAAgBO,aAAaZ,gBAAkBY,cAanD8G,EAAkCa,YAAc1C,KCrElDhI,QAAQC,OAAO,UAAUC,QAAQ,2BAAA,KAAA,qBAAA,uBAAA,gBAAA,OAA2B,SAASC,EAAIsH,EAAoBjC,EAAsBmF,EAAe/I,GAEhI,GAAImG,GAA0B,SAASjG,EAAI2D,EAAkBC,EAAiBzD,GAAa,GAAI5B,GAAOC,KAChG2B,EAAUA,KACd5B,GAAKuK,uBAAyBnF,EAAiBvD,SAC/C7B,EAAKwK,sBAAwBnF,EAAgBxD,SAC7C7B,EAAKyK,aAAe7I,EAAQ0D,YAAcD,EAAgBtD,OAC1D/B,EAAK0K,cAAgB9I,EAAQ2D,aAAeH,EAAiBvD,SAE7D7B,EAAK2K,yBAA2B,GAAIL,GACpCtK,EAAKwF,mBAAqBJ,EAC1BpF,EAAKyF,kBAAoBJ,EACzBrF,EAAK0F,gBAAkB9D,EAAQ+D,gBAAiB,EAChD3F,EAAK4K,mBAAqB,GAAIxD,GAAmB3F,EAAI2D,EAAkBC,EAAiBzD,GACxF5B,EAAK6K,qBAAuB,GAAI1F,GAAqB1D,EAAI2D,EAAkBC,EAAiBzD,GAC5FwD,EAAiB3C,qBAAqBzC,GACtCqF,EAAgB5C,qBAAqBzC,IAEnCK,EAAMqH,EAAwBpH,SAkFlC,OAhFAD,GAAI0C,6BAA+B,WAAe,GAAI/C,GAAOC,KACvDuD,EAAMjC,EAAKkC,sBACXqH,EAAkB,MAAQtH,EAAIxD,EAAKwK,uBAAyBhH,EAAIxD,EAAK0K,eACrEK,EAAoB,MAAQvH,EAAIxD,EAAKuK,wBAA0B/G,EAAIxD,EAAKyK,cACxEO,EAAuB,MAAQxH,EAAIxD,EAAKwK,uBAAyBhH,EAAIxD,EAAK0K,cAC9E,QACEnJ,EAAKgC,+BAA+BuH,EAAiB9K,EAAKiL,eAC1D1J,EAAKgC,+BAA+BwH,EAAmB/K,EAAKkL,iBAC5D3J,EAAKgC,+BAA+ByH,EAAsBhL,EAAKmL,sBAInE9K,EAAI+K,YAAc,aAIlB/K,EAAI4K,cAAgB,SAAU1E,KAI9BlG,EAAI6K,gBAAkB,SAAUhF,KAIhC7F,EAAI8K,mBAAqB,SAAU5E,EAAWL,GAAgB,GAAIlG,GAAOC,IAEvE,OAAOH,GAAGmF,KACRjF,EAAK4K,mBAAmBtE,kBAAkBJ,EAAYK,GACtDvG,EAAK6K,qBAAqBvE,kBAAkBJ,EAAYK,MAI5DlG,EAAI2E,qBAAuB,SAAUpC,EAAMyF,KAa3ChI,EAAIgL,yBAA2B,SAAUzI,GAAW,GAAI5C,GAAOC,KACzDsE,EAAWzE,EAAGY,OAClBV,GAAK2K,yBAAyBW,IAAI1I,GAAM,EACxC,IAAIkC,KAYJ,OAXI9E,GAAK0F,iBACP/F,QAAQoF,QAAQ/E,EAAKkL,gBAAgBtI,GAAO,SAAU2D,GACpDzB,EAAevC,KAAKvC,EAAKyF,kBAAkBZ,WAAW0B,MAI1DvG,EAAK2K,yBAAyBW,IAAI1I,GAAM,GACxC9C,EAAGmF,IAAIH,GAAgBjE,KAAK,WAC1Bb,EAAK6K,qBAAqBjE,uBAAuBhE,GACjD2B,EAASnD,YAEJmD,EAASjD,SAGlBjB,EAAIkL,wBAA0B,SAAU3I,GAAW,GAAI5C,GAAOC,KACxDsE,EAAWzE,EAAGY,QACdoE,KACAoB,EAAalG,EAAKiL,cAAcrI,EAWpC,OAVAkC,GAAevC,KAAKvC,EAAK4K,mBAAmB7D,sBAAsBnE,IAI9DsD,IAAelG,EAAK2K,yBAAyB1J,IAAIiF,IACnDpB,EAAevC,KAAKvC,EAAK6K,qBAAqB9D,sBAAsBnE,IAEtE9C,EAAGmF,IAAIH,GAAgBjE,KAAK,WAC1B0D,EAASnD,YAEJmD,EAASjD,SAGXoG,KCpGT/H,QAAQC,OAAO,UAAUC,QAAQ,oBAAA,KAAA,gBAAoB,SAASC,EAAIwK,GAIhE,GAAIkB,GAAmB,SAAS/J,GAC9B,GAAIzB,GAAOC,IACXD,GAAKyL,IAAMhK,EACXzB,EAAK0L,SACL1L,EAAK2L,QAAU,EACf3L,EAAK4L,kBAAoB,EAEzB5L,EAAK6L,YAAc,SAASC,EAAQxH,GAClC,GAAIyH,GAAY/L,EAAKgM,SACjBC,EAAgBjM,EAAKyL,IAAIK,GAAQxH,GACjC4H,EAAgBpM,EAAGY,OAKvB,OAJAV,GAAKmM,aAAaJ,EAAWG,GAC7BD,EAAcpL,KAAK,SAASuL,GAC1BpM,EAAKqM,mBAAmBN,EAAWK,KAE9BF,EAAc5K,SAEvB3B,QAAQoF,SAAS,OAAQ,MAAO,MAAO,UAAW,SAAU+G,GAC1D9L,EAAK8L,GAAU,SAASxH,GACtB,MAAOtE,GAAK6L,YAAYC,EAAQxH,MAqCtC,OAhCAkH,GAAiBlL,UAAU0L,OAAS,WAElC,MADA/L,MAAK0L,UACE1L,KAAK0L,SAGdH,EAAiBlL,UAAU6L,aAAe,SAASJ,EAAWG,GAC5DjM,KAAKyL,MAAMK,IACTG,cAAeA,EACfI,UAAU,IAIdd,EAAiBlL,UAAU+L,mBAAqB,SAASN,EAAWjL,GAClE,GAAIQ,GAAUrB,KAAKyL,MAAMK,EACzBzK,GAAQ,OAAYR,EACpBQ,EAAQgL,UAAW,EACnBrM,KAAKsM,0BAGPf,EAAiBlL,UAAUiM,uBAAyB,WAElD,IADA,GAAIC,IAAO,GACHA,GACNC,MAAQxM,KAAKyL,MAAMzL,KAAK2L,mBACpBa,OAASA,MAAMH,UACjBG,MAAMP,cAAc9K,QAAQqL,MAAM3L,QAClCb,KAAK2L,qBAELY,GAAO,GAKNhB,KCXT7L,QAAQC,OAAO,UAAUC,QAAQ,yBAAA,KAAyB,SAASC,GAEjE,GAAI4M,GAAe,SAASC,EAAcvH,EAAkBwH,GAC1D3M,KAAK0M,aAAeA,EACpB1M,KAAK4M,kBAAoBzH,EACzBnF,KAAK6M,mBAAqBF,EAG5BF,GAAapM,UAAUyM,gBAAkB,SAASpK,GAChD,GAAIqK,GAAQrK,EAAI1C,KAAK0M,aACjBK,IACF/M,KAAK4M,kBAAkBI,QAAQD,IAInCN,EAAapM,UAAU4M,cAAgB,SAASF,GAC9C,MAAOA,GAAM9L,IAGfwL,EAAapM,UAAU6M,cAAgB,SAASvK,GAC9C,GAAIoK,GAAQrK,IAAI1C,KAAK0M,aACrB,IAAIK,EAAO,CACT,GAAI9G,GAAajG,KAAK4M,kBAAkBI,QAAQD,EAC5C9G,IACFA,EAAWkH,OAAOnN,KAAK6M,yBCvE/BnN,QAAQC,OAAO,UAAU6H,QAAQ,QAAA,KAAQ,SAAS3H,GAChD,GAAIE,GAAOC,IAEXD,GAAKyD,sBAAwB,SAAS4J,GACpC,MAAOA,GAAOC,OAAO,GAAGC,cAAgBF,EAAOhL,MAAM,IAGvDrC,EAAKuD,+BAAiC,SAASH,EAAMgH,EAAIjH,GACvD,OACEqF,kBAAmBpF,EACnBkF,mBAAoB8B,EACpBjH,cAAeA,IAInBnD,EAAKgH,cAAgB,SAASwG,EAAO5K,GAEnC,IAAI,GADA6K,GAAID,EAAM3G,OACN9C,EAAE,EAAQ0J,GAAL1J,EAAQA,IACnB,GAAInB,GAAQ4K,EAAMzJ,GAChB,OAAO,CAGX,QAAO,GAGT/D,EAAKmH,gBAAkB,SAASqG,EAAO5K,GAErC,GAAI8K,GAAQF,EAAMG,QAAQ/K,EACtB8K,GAAQ,IACVF,EAAMI,OAAOF,EAAO,IAIxB1N,EAAKoE,YAAc,SAASsJ,EAAOxJ,GAEjC,GAAI2J,KAMJ,OALAlO,SAAQoF,QAAQ2I,EAAO,SAAS9K,GAC1BsB,EAAKtB,IACPiL,EAActL,KAAKK,KAGhBiL,GAGT7N,EAAKwC,iBAAmB,SAASsL,EAAOC,GACtC,GAAIC,GAAaF,EAAMxN,UACnB2N,EAAcF,EAAOzN,SACzB,KAAK,GAAI6D,KAAQ8J,GACiB,kBAArBA,GAAY9J,KACrB6J,EAAW7J,GAAQ8J,EAAY9J,KAKrCnE,EAAK6C,WAAa,SAASqL,EAAQC,EAAQC,GACzCzO,QAAQoF,QAAQqJ,EAAQ,SAASC,GAC/BF,EAAOE,GAASH,EAAOG,SC1D7B1O,QAAQC,OAAO,UAAUC,QAAQ,gBAAiB,WAEhD,GAAIyK,GAAgB,WAClBrK,KAAKqO,aASP,OAPAhE,GAAchK,UAAUgL,IAAM,SAASiD,EAAKvB,GAC1C/M,KAAKqO,UAAUC,GAAOvB,GAExB1C,EAAchK,UAAUW,IAAM,SAASsN,GACrC,MAAOtO,MAAKqO,UAAUC,IAGjBjE","file":"relate.min.js","sourcesContent":["\"use strict\";\r\nvar c = console;\r\n\r\nangular.module('Relate', []);","\r\nangular.module('Relate').factory('BaseCollection', function($q) {\r\n  /*\r\n  A collection has an internal index of the objects in the database.\r\n  What it uses as keys and values is up to the derived class.\r\n  */\r\n  var BaseCollection = function()    {var self = this;\r\n    self.__index = null;\r\n    self.__db = null;\r\n    self.dbDocumentType = null;\r\n  };\r\n  var def = BaseCollection.prototype;\r\n  \r\n  def.__postAndLoad = function(document)    {var self = this;\r\n    var defered = $q.defer();\r\n    document.type = self.dbDocumentType;\r\n    self.__db.post(document).then( function (result) {\r\n      if (result.ok) {\r\n        self.__db.get(result.id).then( function (docFromDb) {        \r\n          defered.resolve(self.loadDocumentFromDb(docFromDb));\r\n        });\r\n      } else {\r\n        console.log(result);\r\n        throw \"Error fetching data\";\r\n      }\r\n    });\r\n    return defered.promise;\r\n  };\r\n  \r\n  return BaseCollection;\r\n});","\r\nangular.module('Relate').factory('Collection', function(util, $q, BaseCollection) {\r\n  \r\n  var Collection = function(db, singleItemName, fieldNames, options)    {var self = this;\r\n    var options = options || {};\r\n    self.itemName = singleItemName;\r\n    self.collectionName = singleItemName; //This is how a relationship references collection\r\n    self.plural = options.plural || singleItemName + 's'\r\n    self.dbDocumentType = options.dbDocumentType || singleItemName;\r\n    self.__db = db;\r\n    self.__factoryFunction = options.factoryFunction || function(){};\r\n    self.__items = {};\r\n    self.__relationships = [];\r\n    self.__fieldNames = fieldNames.slice();\r\n    self.__fullFieldNames = fieldNames.slice();\r\n    self.__fullFieldNames.push('_id');\r\n    self.__fullFieldNames.push('_rev');\r\n  };\r\n  util.inheritPrototype(Collection, BaseCollection);\r\n  var def = Collection.prototype;\r\n\r\n  def.registerRelationship = function(relationship)    {var self = this;\r\n    self.__relationships.push(relationship);\r\n  };\r\n\r\n  def.loadDocumentFromDb = function(doc)    {var self = this;\r\n    var item = new self.__factoryFunction();\r\n    util.copyFields(doc, item, self.__fullFieldNames);\r\n    self.__items[doc._id] = item;\r\n    return item;\r\n  };\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        singleName = cap(self.itemName),\r\n        plural = cap(self.plural);\r\n    function getFuncDef(action, pluralise, queuedPromise) {\r\n      var name = pluralise? action + plural : action + singleName,\r\n          func = self['__' + action + '__'];\r\n      return util.createAccessFunctionDefinition(name, func, queuedPromise);\r\n    }\r\n    return [\r\n      getFuncDef('new', false, true),\r\n      getFuncDef('save', false, true),\r\n      getFuncDef('delete', false, true),\r\n      getFuncDef('get', false, false),\r\n      getFuncDef('find', true, false),\r\n      getFuncDef('all', true, false),\r\n    ]\r\n  };\r\n  \r\n  def.__get__ = function(id)    {var self = this;\r\n    return self.__items[id];\r\n  };\r\n  \r\n  def.__all__ = function()    {var self = this;\r\n    return Object.keys(self.__items).map(function(i){\r\n      return self.__items[i];\r\n    });\r\n  };\r\n\r\n  def.__find__ = function(query)    {var self = this;\r\n    /*\r\n    query can be:\r\n      a function returning true or false\r\n      an object like {name: 'deirdre'} -- which returns items whose properties match.\r\n      an empty object {} -- which returns all items.\r\n    TODO: what about parent properties?\r\n    */\r\n    var test;\r\n    if (typeof query === 'function') {\r\n      test = query;\r\n    } else if (typeof query === 'object') {\r\n      test = function(item) {\r\n        for (prop in query) {\r\n          if (item[prop] !== query[prop]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      throw 'Invalid argument for \"find\", must be an object or a function.';\r\n    }\r\n    return util.filterIndex(self.__items, test);\r\n  };\r\n  \r\n  def.__new__ = function(data)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(data, doc, self.__fieldNames);\r\n    self.__postAndLoad(doc).then(function (newItem) {\r\n      //TODO: link relationships...\r\n      deferred.resolve(newItem);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__save__ = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(item, doc, self.__fullFieldNames);\r\n    self.__db.put(doc).then(function (result) {\r\n      item._rev = result.rev;\r\n      deferred.resolve(item._rev);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__delete__ = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var childDeletions = [];\r\n    angular.forEach(self.__relationships, function(relationship) {\r\n      childDeletions.push(relationship.respondToItemDeleted(item, self));\r\n    });\r\n    $q.all(childDeletions).then(function() {\r\n      self.__db.remove(item).then(function (result) {\r\n        delete self.__items[item._id];\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  return Collection;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemChildrenRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemChildrenRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_child_' + childAlias + 's_of_' + parentAlias;\r\n    self.__db = db;\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || false;\r\n    self.__index = {};//format {parentId: {doc: Object, liveChildren: []}\r\n    self.__reverseIndex = {};//format {childId: parentId}\r\n  };\r\n  util.inheritPrototype(ItemChildrenRegister, BaseCollection);\r\n  var def = ItemChildrenRegister.prototype;\r\n  \r\n  def.loadDocumentFromDb = function(doc)     {var self = this;\r\n    var parentId = doc.parentId;\r\n    if (self.__index[parentId]) {\r\n      throw \"Found duplicate item children link in database.\"\r\n    }\r\n    var newEntry = {doc: doc};\r\n    self.__index[parentId] = newEntry;\r\n    angular.forEach(doc.childrenIds, function (childId) {\r\n      self.__reverseIndex[childId] = parentId;\r\n    });\r\n    return newEntry;\r\n  };\r\n\r\n  def.getChildren = function(parentItem)    {var self = this;\r\n    var indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n      return indexEntry.liveChildren;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[parentItemId],\r\n        innerPromise;\r\n    //Note: parentItemId and indexEntry could rightfully be null/undefined.\r\n    self.__unlinkChildFromPreviousParent(childItem).then(function() {\r\n      self.__reverseIndex[childItem._id] = parentItemId;\r\n      if (indexEntry) {\r\n        innerPromise = self.__addChildToIndexEntry(indexEntry, childItem);\r\n      } else {\r\n        innerPromise = self.__postAndLoad({\r\n          parentId: parentItem._id,\r\n          childrenIds: [childItem._id]\r\n        });\r\n      }\r\n      innerPromise.then(function () {\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToParentDeleted = function(parentItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      if (self.__cascadeDelete && indexEntry.doc.childrenIds.length > 0) {\r\n        debug(indexEntry);\r\n        throw 'Cannot delete parent object as it still has children';\r\n      } else {\r\n        self.__db.remove(indexEntry.doc).then(function() {\r\n          delete self.__index[parentItem._id];\r\n          deferred.resolve();\r\n        });\r\n      }\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    return self.__unlinkChildFromPreviousParent(childItem);\r\n  };\r\n\r\n  def.__addChildToIndexEntry = function(indexEntry, childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n    if (util.arrayContains(indexEntry.doc.childrenIds, childItem._id)) {\r\n      deferred.resolve();\r\n    } else {\r\n      indexEntry.doc.childrenIds.push(childItem.Id);\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        indexEntry.liveChildren.push(childItem),\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__unlinkChildFromPreviousParent = function(childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var oldParentId = self.__reverseIndex[childItem._id];\r\n    if (oldParentId) {\r\n      var indexEntry = self.__index[oldParentId];\r\n      util.removeFromArray(indexEntry.doc.childrenIds, childItem._id);\r\n      self.__reverseIndex[childItem._id] = null;\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n        util.removeFromArray(indexEntry.liveChildren, childItem);\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__ensureIndexEntryHasLiveChildren = function(indexEntry)    {var self = this;\r\n    var liveChildren = indexEntry.liveChildren;\r\n    if (!liveChildren) {\r\n      var liveChildren = [];\r\n      angular.forEach(indexEntry.doc.childrenIds, function (childId) {\r\n        liveChildren.push(self.__childCollection.__get__(childId));\r\n      });\r\n      indexEntry.liveChildren = liveChildren;\r\n    }\r\n  };\r\n\r\n  return ItemChildrenRegister;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemParentRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemParentRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_parent_' + parentAlias + '_of_' + childAlias;\r\n    self.__db = db;\r\n    self.__index = {};\r\n    self.__parentCollection = parentCollection;\r\n  };\r\n  util.inheritPrototype(ItemParentRegister, BaseCollection);\r\n  var def = ItemParentRegister.prototype;\r\n\r\n  def.loadDocumentFromDb = function(document)    {var self = this;\r\n    if (self.__index[document.childId]) {\r\n      throw \"Found duplicate item parent link in database.\"\r\n    }\r\n    var newIndexEntry = {document: document};\r\n    self.__index[document.childId] = newIndexEntry;\r\n    return newIndexEntry;\r\n  };\r\n  \r\n  def.getParent = function(childItem)    {var self = this;\r\n    var indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      if (angular.isUndefined(indexEntry.liveObject)) {\r\n        indexEntry.liveObject = self.__parentCollection.__get__(indexEntry.document.parentId) || null;\r\n      }\r\n      return indexEntry.liveObject;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      indexEntry.document.parentId = parentItemId;\r\n      self.__db.put(indexEntry.document).then(function (result) {\r\n        indexEntry.document._rev = result.rev;\r\n        indexEntry.liveObject = parentItem;\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      self.__postAndLoad({\r\n        parentId: parentItemId, \r\n        childId: childItem._id\r\n      }).then(function (result) {\r\n        deferred.resolve();\r\n      });      \r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        id = childItem._id,\r\n        indexEntry = self.__index[id];\r\n    if (indexEntry) {\r\n      self.__db.remove(indexEntry.document).then(function (result) {\r\n        delete self.__index[id];\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ItemParentRegister;\r\n});\r\n\r\n    ","\r\nangular.module('Relate').service('model', function($q, Collection, ParentChildRelationship) {\r\n  \r\n  var self= this,\r\n      __db,\r\n      __loadQuery,\r\n      __collections = {},\r\n      __relationships = {},\r\n      __dbDocumentTypeLoaders = {},\r\n      __lastPromiseInQueue = $q.when(),\r\n      __relationshipDefinitionFunctions = {};\r\n  \r\n  self.initialize = function(db, query) {\r\n    __db = db;\r\n    __loadQuery = query || function() {\r\n      return __db.allDocs({\r\n        include_docs: true,\r\n        attachments: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  var __dataReady;\r\n  self.dataReady = function (){\r\n    if (__dataReady === undefined) {\r\n      __dataReady = $q.defer();\r\n      __initializeModel().then( function () {\r\n        __dataReady.resolve();\r\n      });\r\n    }\r\n    return __dataReady.promise;\r\n  };\r\n  \r\n  self.printInfo = function (){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        console.log('model.' + accessFunc.ModelFunctionName);\r\n      });\r\n    });\r\n  };\r\n  \r\n  /************* MODEL DEFINITION FUNCTIONS *************/\r\n  \r\n  self.defineCollection = function(singleItemName, fieldNames, options){\r\n    var collection = new Collection(__db, singleItemName, fieldNames, options);\r\n    __collections[collection.collectionName] = collection;\r\n    __registerDocumentTypeLoader(collection);\r\n    __createAccessFunctions(collection.getAccessFunctionDefinitions())\r\n    return collection;\r\n  };\r\n  \r\n  self.defineRelationship = function(options){\r\n    var relationshipType = options.type;\r\n    var fn = __relationshipDefinitionFunctions[relationshipType];\r\n    if (typeof fn === 'function') {\r\n      relationship = fn.apply(self, [options]);\r\n      __createAccessFunctions(relationship.getAccessFunctionDefinitions())\r\n      __relationships[relationship.collectionName] = relationship;\r\n    } else {\r\n      throw '' + options.type +' is not a valid relationship type';\r\n    }\r\n  };\r\n  \r\n  function __createParentChildRelationship(options){\r\n    var parentCollectionName = options.parent;\r\n    var childCollectionName = options.child;\r\n    var parentCollection = __collections[parentCollectionName];\r\n    var childCollection = __collections[childCollectionName];\r\n    return new ParentChildRelationship(__db, parentCollection, childCollection, options);\r\n  };\r\n  __relationshipDefinitionFunctions.parentChild = __createParentChildRelationship;\r\n  \r\n  /************* COLLECTION ACCESS FUNCTIONALITY ************\r\n  \r\n    __createAccessFunctions() creates methods like:\r\n  \r\n      model.newTask({})\r\n      model.getProjectTasks(project)\r\n  \r\n    Query functions (getX, findX) return directly. Data changing functions (all other prefixed) return promises.\r\n    \r\n    Query data may be dirty while a promise is waiting to complete, so you need to do this:\r\n    \r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n    Data changing functions are queued internally, so you can do this.\r\n    model.newTask({});\r\n    model.newTask({});\r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n  */\r\n  function __createAccessFunctions(functionDefinitions){\r\n    angular.forEach(functionDefinitions, function(accessFunc) {\r\n      var func;\r\n      if (accessFunc.queuedPromise) {\r\n        func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n      } else {\r\n        func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n      }\r\n      self[accessFunc.ModelFunctionName] = func;\r\n    });\r\n  };\r\n  \r\n  function __createAccessFunctionsOld(){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        var func;\r\n        if (accessFunc.queuedPromise) {\r\n          func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n        } else {\r\n          func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n        }\r\n        self[accessFunc.ModelFunctionName] = func;\r\n      });\r\n    });\r\n  };\r\n  \r\n  function __getNonQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      return collectionFunction.apply(collection, arguments);\r\n    }\r\n  };\r\n  \r\n  function __getQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      var originalArgs = arguments;\r\n      var deferred = $q.defer();\r\n      __lastPromiseInQueue.then( function() {\r\n        __lastPromiseInQueue = collectionFunction.apply(collection, originalArgs);\r\n        __lastPromiseInQueue.then(function(result) {\r\n          deferred.resolve(result);\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n  };\r\n\r\n  /************* INITAL LOADING FUNCTIONALITY *************/\r\n  \r\n  function __registerDocumentTypeLoader(collection){\r\n    var dbDocumentType = collection.dbDocumentType;\r\n    if (dbDocumentType in __dbDocumentTypeLoaders) {\r\n      var claimedBy = __dbDocumentTypeLoaders[dbDocumentType];\r\n      throw 'More than one collection/relationship attempting to register dbDocumentType: \"' + dbDocumentType + '\".';\r\n    } else {\r\n      __dbDocumentTypeLoaders[dbDocumentType] = collection;\r\n    }\r\n  };\r\n  \r\n  function __initializeModel(){\r\n    var defer = $q.defer();\r\n    var loadQuery = __loadQuery();\r\n    loadQuery.then(function (result) {\r\n      angular.forEach(result.rows, function(row){\r\n        __addDocumentToCollection(row.doc);\r\n      });\r\n      __createLinks();\r\n      defer.resolve();\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n    return defer.promise;\r\n  };\r\n  \r\n  function __addDocumentToCollection(document){\r\n    var dbDocumentType = document.type;\r\n    if (dbDocumentType) {\r\n      var collection = __dbDocumentTypeLoaders[dbDocumentType];\r\n      if (collection) {\r\n        collection.loadDocumentFromDb(document, dbDocumentType);\r\n      } else {\r\n        console.log(document);\r\n        console.log('Could not load document \\\"' + document._id + '\\\" as type was not recognised (' + dbDocumentType + ')');\r\n      }\r\n    } else {\r\n      //__db.remove(document);\r\n      throw('Could not load document \\\"' + document._id + '\\\" as it has no \\\"type\\\" field.');\r\n    }\r\n  };\r\n  \r\n  function __createLinks() {\r\n    angular.forEach(__relationships, function(relationship) {\r\n      \r\n    });\r\n  }\r\n  \r\n});\r\n\r\n","\r\nangular.module('Relate').factory('ParentChildRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ParentChildRelationship = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__parentCollectionName = parentCollection.itemName;\r\n    self.__childCollectionName = childCollection.itemName;\r\n    self.__childAlias = options.childAlias || childCollection.plural;\r\n    self.__parentAlias = options.parentAlias || parentCollection.itemName;\r\n    //-self.collectionName = 'lnk_' + self.__parentAlias + '_' + self.__childAlias;\r\n    self.__parentDeleteInProgress = new ValueRegister();\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || true;\r\n    self.itemParentRegister = new ItemParentRegister(db, parentCollection, childCollection, options);\r\n    self.itemChildrenRegister = new ItemChildrenRegister(db, parentCollection, childCollection, options);\r\n    parentCollection.registerRelationship(self);\r\n    childCollection.registerRelationship(self);\r\n  };\r\n  var def = ParentChildRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        getParentFnName = 'get' + cap(self.__childCollectionName) + cap(self.__parentAlias),\r\n        getChildrenFnName = 'get' + cap(self.__parentCollectionName) + cap(self.__childAlias),\r\n        setChildParentFnName = 'set' + cap(self.__childCollectionName) + cap(self.__parentAlias);\r\n    return [\r\n      util.createAccessFunctionDefinition(getParentFnName, self.__getParent__),\r\n      util.createAccessFunctionDefinition(getChildrenFnName, self.__getChildren__),\r\n      util.createAccessFunctionDefinition(setChildParentFnName, self.__setChildParent__),\r\n    ];\r\n  };\r\n  \r\n  def.createLinks = function() {\r\n    \r\n  }\r\n  \r\n  def.__getParent__ = function (childItem)    {var self = this;\r\n    //return self.itemParentRegister.getParent(childItem);\r\n  };\r\n  \r\n  def.__getChildren__ = function (parentItem)    {var self = this;\r\n    //return self.itemChildrenRegister.getChildren(parentItem);\r\n  };\r\n  \r\n  def.__setChildParent__ = function (childItem, parentItem)    {var self = this;\r\n    //TODO: assert they are of correct type?\r\n    return $q.all([\r\n      self.itemParentRegister.linkChildToParent(parentItem, childItem), \r\n      self.itemChildrenRegister.linkChildToParent(parentItem, childItem)\r\n    ]);\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n  //-set key to null - update indices\r\n    /*\r\n    if (collection === self.__parentCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__childCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n    */\r\n  };\r\n  \r\n  def.__respondToParentDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__parentDeleteInProgress.set(item, true);\r\n    var childDeletions = [];\r\n    if (self.__cascadeDelete) {\r\n      angular.forEach(self.__getChildren__(item), function (childItem) {\r\n        childDeletions.push(self.__childCollection.__delete__(childItem));\r\n      });\r\n    }\r\n    //Note that __parentDeleteInProgress will be set to false before promises are all resolved (non critical)\r\n    self.__parentDeleteInProgress.set(item, false);\r\n    $q.all(childDeletions).then(function() {\r\n      self.itemChildrenRegister.respondToParentDeleted(item);\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__respondToChildDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer(),\r\n        childDeletions = [],\r\n        parentItem = self.__getParent__(item);\r\n    childDeletions.push(self.itemParentRegister.respondToChildDeleted(item));\r\n    /* This is to prevent many calls to unlinking children of a parent when the parent will \r\n    be deleted anyway. Just to save on db writes.\r\n    */\r\n    if (parentItem && !self.__parentDeleteInProgress.get(parentItem)) {\r\n      childDeletions.push(self.itemChildrenRegister.respondToChildDeleted(item));\r\n    }\r\n    $q.all(childDeletions).then(function() {\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ParentChildRelationship;\r\n});","\r\nangular.module('Relate').factory('QueuedResponseDb', function($q, ValueRegister) {\r\n  /*\r\n  post put get remove\r\n  */\r\n  var QueuedResponseDb = function(db) {\r\n    var self = this;\r\n    self._db = db;\r\n    self.queue = {};\r\n    self._nextId = 0;\r\n    self._latestResolvedId = 1;\r\n    \r\n    self.wrapPromise = function(dbCall, data) {\r\n      var promiseId = self.nextId();\r\n      var hiddenPromise = self._db[dbCall](data);\r\n      var returnPromise = $q.defer();\r\n      self.queuePromise(promiseId, returnPromise);\r\n      hiddenPromise.then(function(response) {\r\n        self.promiseGotResolved(promiseId, response);\r\n      });\r\n      return returnPromise.promise;\r\n    };\r\n    angular.forEach(['post', 'put', 'get', 'remove'], function (dbCall) {\r\n      self[dbCall] = function(data) {\r\n        return self.wrapPromise(dbCall, data);\r\n      }\r\n    });\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.nextId = function (){\r\n    this._nextId ++;\r\n    return this._nextId;\r\n  }\r\n  \r\n  QueuedResponseDb.prototype.queuePromise = function(promiseId, returnPromise) {\r\n    this.queue[promiseId] = {\r\n      returnPromise: returnPromise,\r\n      resolved: false\r\n    };\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.promiseGotResolved = function(promiseId, result) {\r\n    var promise = this.queue[promiseId]\r\n    promise['result'] = result;\r\n    promise.resolved = true;\r\n    this.releasResolvedPromises();\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.releasResolvedPromises = function() {\r\n    var stop = false; // encounteredUnresolvedPromiseOrReachedEndOfQueue\r\n    while (!stop) {\r\n      entry = this.queue[this._latestResolvedId]\r\n      if (entry && entry.resolved) {\r\n        entry.returnPromise.resolve(entry.result);\r\n        this._latestResolvedId ++;\r\n      } else {\r\n        stop = true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return QueuedResponseDb;\r\n});","/*\r\nNew way:\r\n\r\nSpecify one relationship per collection.\r\nIt knows of the other collection, and how the relationship behaves.\r\n\r\nThe model is responisble for passing complementary relationships to the collections.\r\n\r\nLinking:\r\n   collection ends up with methods:\r\n   setParent\r\n   addChild\r\n   removeChild\r\n   addTag\r\n   removeTag\r\n   \r\n  model.defineRelationship({type: 'parentChild'... })\r\n    r1 = parentChildRelationship(parent, child)\r\n    r2 = childParentRelationship(parent, child)\r\n    parentCollection.registerRelationship(r1)\r\n    parentCollection.registerRelationship(r2)\r\n    childCollection.registerRelationship(r1)\r\n    childCollection.registerRelationship(r2)\r\n  }\r\n  What does a relationship do:\r\n    create accessor functions (get, set)\r\n    respond to deletions\r\n    respond to new\r\n    \r\n    \r\n  Deletions:\r\n    if has child items: \r\n      delete:\r\n        chilren\r\n        parent of child links \r\n        children of parent\r\n    if has parent items:\r\n      delete:\r\n        parent of child links \r\n        children of parent\r\n    if many to many:\r\n      delete join only\r\n      \r\n    ...but parent child deletions could benefit from not having all the items stripped first. Do I care?\r\n    I could collate operations on the db side (i.e. collect changes to single objects, and flush them after a period)\r\n    \r\n    \r\n      \r\n*/\r\n\r\nangular.module('Relate').factory('ParentRelationshipNew', function($q) {\r\n\r\n  var Relationship = function(propertyName, parentCollection, parentPopertyName) {\r\n    this.propertyName = propertyName;\r\n    this._parentCollection = parentCollection;\r\n    this._parentPopertyName = parentPopertyName;\r\n  };\r\n  \r\n  Relationship.prototype._convertFromDoc = function(doc) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      this._parentCollection.getItem(value);\r\n    }\r\n  };\r\n  \r\n  Relationship.prototype._convertToDoc = function(value) {\r\n    return value.id;\r\n  };\r\n  \r\n  Relationship.prototype._onItemRemove = function(item) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      var parentItem = this._parentCollection.getItem(value);\r\n      if (parentItem) {\r\n        parentItem._links[this._parentPopertyName]\r\n      }\r\n    }\r\n  };\r\n  \r\n});","\r\n\r\n\r\nangular.module('Relate').service('util', function($q) {\r\n  var self = this;\r\n  \r\n  self.capitalizeFirstLetter = function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n  \r\n  self.createAccessFunctionDefinition = function(name, fn, queuedPromise) {\r\n    return {\r\n      ModelFunctionName: name,\r\n      collectionFunction: fn,\r\n      queuedPromise: queuedPromise\r\n    }\r\n  };\r\n    \r\n  self.arrayContains = function(array, item) {\r\n    var l = array.length\r\n    for(var i=0; i <= l; i++) {\r\n      if (item == array[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  self.removeFromArray = function(array, item) {\r\n    //will be unique in list.\r\n    var index = array.indexOf(item);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  };\r\n  \r\n  self.filterIndex = function(index, test) {\r\n    //accepts an object like array.\r\n    var filteredItems = [];\r\n    angular.forEach(index, function(item) {\r\n      if (test(item)) {\r\n        filteredItems.push(item);\r\n      }\r\n    });\r\n    return filteredItems;\r\n  };\r\n  \r\n  self.inheritPrototype = function(Child, Parent) {\r\n    var childProto = Child.prototype;\r\n    var parentProto = Parent.prototype;\r\n    for (var prop in parentProto) {\r\n      if (typeof parentProto[prop] == 'function') {\r\n        childProto[prop] = parentProto[prop];\r\n      }\r\n    }\r\n  };\r\n  \r\n  self.copyFields = function(source, target, fields)    {var self = this;\r\n    angular.forEach(fields, function(field) {\r\n      target[field] = source[field];\r\n    });\r\n  };\r\n  \r\n});\r\n","\r\nangular.module('Relate').factory('ValueRegister', function() {\r\n  //\r\n  var ValueRegister = function() {\r\n    this._register = {};\r\n  };\r\n  ValueRegister.prototype.set = function(key, value) {\r\n    this._register[key] = value;\r\n  };\r\n  ValueRegister.prototype.get = function(key) {\r\n    return this._register[key];\r\n  };\r\n  \r\n  return ValueRegister;\r\n});\r\n"],"sourceRoot":"/source/"}