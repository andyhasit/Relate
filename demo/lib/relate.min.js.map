{"version":3,"sources":["module.js","BaseCollection.js","Collection.js","ItemChildrenRegister.js","ItemParentRegister.js","ManyToManyRelationship.js","model.js","ParentChildRelationship.js","queued-response-db.js","relationship.js","util.js","value-register.js"],"names":["c","console","angular","module","factory","$q","BaseCollection","self","this","__index","__db","dbDocumentType","def","prototype","__postAndLoad","document","defered","defer","type","post","then","result","ok","log","get","id","docFromDb","resolve","loadDocumentFromDb","promise","util","Collection","db","singleItemName","fieldNames","options","itemName","collectionName","plural","__factoryFunction","factoryFunction","__items","__relationships","__fieldNames","slice","__fullFieldNames","push","inheritPrototype","registerRelationship","relationship","fieldName","doc","item","copyFields","_id","getAccessFunctionDefinitions","getFuncDef","action","pluralise","queuedPromise","name","singleName","func","createAccessFunctionDefinition","cap","capitalizeFirstLetter","__get__","__all__","Object","keys","map","i","__find__","query","test","prop","filterIndex","__new__","data","deferred","newItem","saveItem","put","_rev","rev","__delete__","childDeletions","forEach","respondToItemDeleted","all","remove","ItemChildrenRegister","parentCollection","childCollection","childAlias","parentAlias","__parentCollection","__childCollection","__cascadeDelete","cascadeDelete","__reverseIndex","parentId","newEntry","childrenIds","childId","getChildren","parentItem","indexEntry","__ensureIndexEntryHasLiveChildren","liveChildren","linkChildToParent","childItem","innerPromise","parentItemId","__unlinkChildFromPreviousParent","__addChildToIndexEntry","respondToParentDeleted","length","debug","respondToChildDeleted","arrayContains","Id","oldParentId","removeFromArray","ItemParentRegister","newIndexEntry","getParent","isUndefined","liveObject","ValueRegister","ManyToManyRelationship","leftCollection","rightCollection","__rightCollection","__leftCollection","defaultDbDocumentTypeName","toLowerCase","__functionNameEnd","qualifier","__leftRights","__rightLefts","leftName","leftPlural","rightName","rightPlural","end","getLeftRightsFnName","getRightLeftsFnName","addLeftRightFnName","removeLeftRightFnName","isLeftLinkedToRightFnName","getLeftRights","getRightLefts","addLeftToRight","removeLeftRight","isLeftLinkedToRight","right","left","__updateOneRegisterWithDocument","__sendDocumentToReusePile","register","key","entry","undefined","ids","docs","createLinks","leftItem","__getInitialisedEntry","items","rightItem","addLeftRight","when","__writeLinkToDatabase","leftEntry","rightEntry","addUnique","collection","__respondToParentDeleted","__respondToChildDeleted","__docsForReuse","index","__loadEntryItems","service","ParentChildRelationship","__createParentChildRelationship","parentCollectionName","parent","childCollectionName","child","__collections","__createAccessFunctions","accessFunc","__getQueuedFunction","collectionFunction","__getNonQueuedFunction","ModelFunctionName","apply","arguments","originalArgs","__lastPromiseInQueue","__registerDocumentTypeLoader","__dbDocumentTypeLoaders","__initializeModel","loadQuery","__loadQuery","rows","row","__addDocumentToCollection","__createLinks","err","__relationshipDefinitionFunctions","initialize","allDocs","include_docs","attachments","__dataReady","dataReady","m","printInfo","defineCollection","defineRelationship","relationshipType","fn","parentChild","save","__childAlias","__parentAlias","__keyName","__parentDeleteInProgress","__itemParent","__itemChildren","capitalize","childName","parentName","setChildParent","oldParent","set","itemChildrenRegister","itemParentRegister","QueuedResponseDb","_db","queue","_nextId","_latestResolvedId","wrapPromise","dbCall","promiseId","nextId","hiddenPromise","returnPromise","queuePromise","response","promiseGotResolved","resolved","releasResolvedPromises","stop","Relationship","propertyName","parentPopertyName","_parentCollection","_parentPopertyName","_convertFromDoc","value","getItem","_convertToDoc","_onItemRemove","_links","string","charAt","toUpperCase","array","l","addAsItem","object","indexOf","splice","filteredItems","Child","Parent","childProto","parentProto","source","target","fields","field","_register"],"mappings":"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","file":"relate.min.js","sourcesContent":["\"use strict\";\r\nvar c = console;\r\n\r\nangular.module('Relate', []);","\r\nangular.module('Relate').factory('BaseCollection', function($q) {\r\n  /*\r\n  A collection has an internal index of the objects in the database.\r\n  What it uses as keys and values is up to the derived class.\r\n  */\r\n  var BaseCollection = function()    {var self = this;\r\n    self.__index = null;\r\n    self.__db = null;\r\n    self.dbDocumentType = null;\r\n  };\r\n  var def = BaseCollection.prototype;\r\n  \r\n  def.__postAndLoad = function(document)    {var self = this;\r\n    var defered = $q.defer();\r\n    document.type = self.dbDocumentType;\r\n    self.__db.post(document).then( function (result) {\r\n      if (result.ok) {\r\n        self.__db.get(result.id).then( function (docFromDb) {        \r\n          defered.resolve(self.loadDocumentFromDb(docFromDb));\r\n        });\r\n      } else {\r\n        console.log(result);\r\n        throw \"Error fetching data\";\r\n      }\r\n    });\r\n    return defered.promise;\r\n  };\r\n  \r\n  return BaseCollection;\r\n});","\r\nangular.module('Relate').factory('Collection', function(util, $q, BaseCollection) {\r\n  \r\n  var Collection = function(db, singleItemName, fieldNames, options)    {var self = this;\r\n    var options = options || {};\r\n    self.itemName = singleItemName;\r\n    self.collectionName = singleItemName; //This is how a relationship references collection\r\n    self.plural = options.plural || singleItemName + 's'\r\n    self.dbDocumentType = options.dbDocumentType || singleItemName;\r\n    self.__db = db;\r\n    self.__factoryFunction = options.factoryFunction || function(){};\r\n    self.__items = {};\r\n    self.__relationships = [];\r\n    self.__fieldNames = fieldNames.slice();\r\n    self.__fullFieldNames = fieldNames.slice();\r\n    self.__fullFieldNames.push('_id');\r\n    self.__fullFieldNames.push('_rev');\r\n  };\r\n  util.inheritPrototype(Collection, BaseCollection);\r\n  var def = Collection.prototype;\r\n\r\n  def.registerRelationship = function(relationship, fieldName)    {var self = this;\r\n    self.__relationships.push(relationship);\r\n    if (fieldName) {\r\n      self.__fullFieldNames.push(fieldName);\r\n    }\r\n  };\r\n\r\n  def.loadDocumentFromDb = function(doc)    {var self = this;\r\n    var item = new self.__factoryFunction();\r\n    util.copyFields(doc, item, self.__fullFieldNames);\r\n    item.type = self.itemName;\r\n    self.__items[doc._id] = item;\r\n    return item;\r\n  };\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        singleName = cap(self.itemName),\r\n        plural = cap(self.plural);\r\n    function getFuncDef(action, pluralise, queuedPromise) {\r\n      var name = pluralise? action + plural : action + singleName,\r\n          func = self['__' + action + '__'];\r\n      return util.createAccessFunctionDefinition(name, func, queuedPromise);\r\n    }\r\n    return [\r\n      getFuncDef('new', false, true),\r\n      getFuncDef('delete', false, true),\r\n      getFuncDef('get', false, false),\r\n      getFuncDef('find', true, false),\r\n      getFuncDef('all', true, false),\r\n    ]\r\n  };\r\n  \r\n  def.__get__ = function(id)    {var self = this;\r\n    return self.__items[id];\r\n  };\r\n  \r\n  def.__all__ = function()    {var self = this;\r\n    return Object.keys(self.__items).map(function(i){\r\n      return self.__items[i];\r\n    });\r\n  };\r\n\r\n  def.__find__ = function(query)    {var self = this;\r\n    /*\r\n    query can be:\r\n      a function returning true or false\r\n      an object like {name: 'deirdre'} -- which returns items whose properties match.\r\n      an empty object {} -- which returns all items.\r\n    TODO: what about parent properties?\r\n    */\r\n    var test;\r\n    if (typeof query === 'function') {\r\n      test = query;\r\n    } else if (typeof query === 'object') {\r\n      test = function(item) {\r\n        for (prop in query) {\r\n          if (item[prop] !== query[prop]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      throw 'Invalid argument for \"find\", must be an object or a function.';\r\n    }\r\n    return util.filterIndex(self.__items, test);\r\n  };\r\n  \r\n  def.__new__ = function(data)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(data, doc, self.__fieldNames);\r\n    self.__postAndLoad(doc).then(function (newItem) {\r\n      //TODO: link relationships...\r\n      deferred.resolve(newItem);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.saveItem = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(item, doc, self.__fullFieldNames);\r\n    self.__db.put(doc).then(function (result) {\r\n      item._rev = result.rev;\r\n      deferred.resolve(item._rev);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__delete__ = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var childDeletions = [];\r\n    angular.forEach(self.__relationships, function(relationship) {\r\n      childDeletions.push(relationship.respondToItemDeleted(item, self));\r\n    });\r\n    $q.all(childDeletions).then(function() {\r\n      self.__db.remove(item).then(function (result) {\r\n        delete self.__items[item._id];\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  return Collection;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemChildrenRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemChildrenRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_child_' + childAlias + 's_of_' + parentAlias;\r\n    self.__db = db;\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || false;\r\n    self.__index = {};//format {parentId: {doc: Object, liveChildren: []}\r\n    self.__reverseIndex = {};//format {childId: parentId}\r\n  };\r\n  util.inheritPrototype(ItemChildrenRegister, BaseCollection);\r\n  var def = ItemChildrenRegister.prototype;\r\n  \r\n  def.loadDocumentFromDb = function(doc)     {var self = this;\r\n    var parentId = doc.parentId;\r\n    if (self.__index[parentId]) {\r\n      throw \"Found duplicate item children link in database.\"\r\n    }\r\n    var newEntry = {doc: doc};\r\n    self.__index[parentId] = newEntry;\r\n    angular.forEach(doc.childrenIds, function (childId) {\r\n      self.__reverseIndex[childId] = parentId;\r\n    });\r\n    return newEntry;\r\n  };\r\n\r\n  def.getChildren = function(parentItem)    {var self = this;\r\n    var indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n      return indexEntry.liveChildren;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[parentItemId],\r\n        innerPromise;\r\n    //Note: parentItemId and indexEntry could rightfully be null/undefined.\r\n    self.__unlinkChildFromPreviousParent(childItem).then(function() {\r\n      self.__reverseIndex[childItem._id] = parentItemId;\r\n      if (indexEntry) {\r\n        innerPromise = self.__addChildToIndexEntry(indexEntry, childItem);\r\n      } else {\r\n        innerPromise = self.__postAndLoad({\r\n          parentId: parentItem._id,\r\n          childrenIds: [childItem._id]\r\n        });\r\n      }\r\n      innerPromise.then(function () {\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToParentDeleted = function(parentItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      if (self.__cascadeDelete && indexEntry.doc.childrenIds.length > 0) {\r\n        debug(indexEntry);\r\n        throw 'Cannot delete parent object as it still has children';\r\n      } else {\r\n        self.__db.remove(indexEntry.doc).then(function() {\r\n          delete self.__index[parentItem._id];\r\n          deferred.resolve();\r\n        });\r\n      }\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    return self.__unlinkChildFromPreviousParent(childItem);\r\n  };\r\n\r\n  def.__addChildToIndexEntry = function(indexEntry, childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n    if (util.arrayContains(indexEntry.doc.childrenIds, childItem._id)) {\r\n      deferred.resolve();\r\n    } else {\r\n      indexEntry.doc.childrenIds.push(childItem.Id);\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        indexEntry.liveChildren.push(childItem),\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__unlinkChildFromPreviousParent = function(childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var oldParentId = self.__reverseIndex[childItem._id];\r\n    if (oldParentId) {\r\n      var indexEntry = self.__index[oldParentId];\r\n      util.removeFromArray(indexEntry.doc.childrenIds, childItem._id);\r\n      self.__reverseIndex[childItem._id] = null;\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n        util.removeFromArray(indexEntry.liveChildren, childItem);\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__ensureIndexEntryHasLiveChildren = function(indexEntry)    {var self = this;\r\n    var liveChildren = indexEntry.liveChildren;\r\n    if (!liveChildren) {\r\n      var liveChildren = [];\r\n      angular.forEach(indexEntry.doc.childrenIds, function (childId) {\r\n        liveChildren.push(self.__childCollection.__get__(childId));\r\n      });\r\n      indexEntry.liveChildren = liveChildren;\r\n    }\r\n  };\r\n\r\n  return ItemChildrenRegister;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemParentRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemParentRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_parent_' + parentAlias + '_of_' + childAlias;\r\n    self.__db = db;\r\n    self.__index = {};\r\n    self.__parentCollection = parentCollection;\r\n  };\r\n  util.inheritPrototype(ItemParentRegister, BaseCollection);\r\n  var def = ItemParentRegister.prototype;\r\n\r\n  def.loadDocumentFromDb = function(document)    {var self = this;\r\n    if (self.__index[document.childId]) {\r\n      throw \"Found duplicate item parent link in database.\"\r\n    }\r\n    var newIndexEntry = {document: document};\r\n    self.__index[document.childId] = newIndexEntry;\r\n    return newIndexEntry;\r\n  };\r\n  \r\n  def.getParent = function(childItem)    {var self = this;\r\n    var indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      if (angular.isUndefined(indexEntry.liveObject)) {\r\n        indexEntry.liveObject = self.__parentCollection.__get__(indexEntry.document.parentId) || null;\r\n      }\r\n      return indexEntry.liveObject;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      indexEntry.document.parentId = parentItemId;\r\n      self.__db.put(indexEntry.document).then(function (result) {\r\n        indexEntry.document._rev = result.rev;\r\n        indexEntry.liveObject = parentItem;\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      self.__postAndLoad({\r\n        parentId: parentItemId, \r\n        childId: childItem._id\r\n      }).then(function (result) {\r\n        deferred.resolve();\r\n      });      \r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        id = childItem._id,\r\n        indexEntry = self.__index[id];\r\n    if (indexEntry) {\r\n      self.__db.remove(indexEntry.document).then(function (result) {\r\n        delete self.__index[id];\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ItemParentRegister;\r\n});\r\n\r\n    ","\r\nangular.module('Relate').factory('ManyToManyRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ManyToManyRelationship = function(db, leftCollection, rightCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__rightCollection = rightCollection;\r\n    self.__leftCollection = leftCollection;\r\n    var defaultDbDocumentTypeName = ('lnk_' + leftCollection.itemName + '_' + rightCollection.itemName).toLowerCase();\r\n    self.__functionNameEnd = '';\r\n    if (options.qualifier) {\r\n      self.__functionNameEnd = 'As' + util.capitalizeFirstLetter(options.qualifier);\r\n      defaultDbDocumentTypeName += '_as_' + options.qualifier.toLowerCase();\r\n    }\r\n    self.dbDocumentType = options.dbDocumentType || defaultDbDocumentTypeName;\r\n    self.__db = db;\r\n    self.__leftCollection = leftCollection;\r\n    self.__rightCollection = rightCollection;\r\n    self.__leftRights = {};\r\n    self.__rightLefts = {};\r\n    rightCollection.registerRelationship(self);\r\n    leftCollection.registerRelationship(self);\r\n  };\r\n  var def = ManyToManyRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()  {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        leftName = cap(self.__leftCollection.itemName),\r\n        leftPlural = cap(self.__leftCollection.plural),\r\n        rightName = cap(self.__rightCollection.itemName),\r\n        rightPlural = cap(self.__rightCollection.plural),\r\n        end = self.__functionNameEnd,\r\n        getLeftRightsFnName = 'get' + leftName + rightPlural + end,\r\n        getRightLeftsFnName = 'get' + rightName + leftPlural + end,\r\n        addLeftRightFnName = 'add' + leftName + rightName + end,\r\n        removeLeftRightFnName = 'remove' + leftName + rightName + end,\r\n        isLeftLinkedToRightFnName = 'is' + leftName + 'LinkedTo' + rightName + end;\r\n    return [\r\n      util.createAccessFunctionDefinition(getLeftRightsFnName, self.getLeftRights),\r\n      util.createAccessFunctionDefinition(getRightLeftsFnName, self.getRightLefts),\r\n      util.createAccessFunctionDefinition(addLeftRightFnName, self.addLeftToRight),\r\n      util.createAccessFunctionDefinition(removeLeftRightFnName, self.removeLeftRight),\r\n      util.createAccessFunctionDefinition(isLeftLinkedToRightFnName, self.isLeftLinkedToRight)\r\n    ];\r\n  };\r\n  \r\n  def.loadDocumentFromDb = function(doc)  {var self = this;\r\n    if (doc.right && doc.left && self.__updateOneRegisterWithDocument(self.__leftRights, doc.left, doc.right)) {\r\n      self.__updateOneRegisterWithDocument(self.__rightLefts, doc.right, doc.left);\r\n    } else {\r\n      self.__sendDocumentToReusePile(doc);\r\n    }\r\n  };\r\n  \r\n  //TODO: should this be nested in loadDocumentFromDb?\r\n  def.__updateOneRegisterWithDocument = function(register, key, id, doc)  {var self = this;\r\n    var entry = register[key];\r\n    if (entry === undefined) {\r\n      register[key] = {ids: [id], docs: [doc]};\r\n    } else {\r\n      if (entry.docs[id]) {\r\n        return false;\r\n      }\r\n      entry.ids.push(id);\r\n      entry.docs[id] = doc;\r\n    }\r\n    return true;\r\n  };\r\n  \r\n  def.createLinks = function()  {var self = this;\r\n    //nothing, we now lazy load.\r\n    /*\r\n    function replaceIdsWithReferences (register, collection) {\r\n      angular.forEach(register, function(entry, key) {\r\n        angular.forEach(entry.ids, function(id, index) {\r\n          //TODO: discard doc if it doesn't exist.\r\n          entry.items[index] = collection.get(id);\r\n        });\r\n      });\r\n    }\r\n    replaceIdsWithReferences(self.__leftRights, self.__rightCollection);\r\n    replaceIdsWithReferences(self.__rightLefts, self.__leftCollection);\r\n    */\r\n  };\r\n  \r\n  def.getLeftRights = function (leftItem)  {var self = this;\r\n    return self.__getInitialisedEntry(self.__leftRights, leftItem._id).items;\r\n  };\r\n  \r\n  def.getRightLefts = function (rightItem)  {var self = this;\r\n    return self.__getInitialisedEntry(self.__rightLefts, rightItem._id).items;\r\n  };\r\n  \r\n  //TODO: assert they are of correct type?\r\n  def.addLeftRight = function (leftItem, rightItem)    {var self = this;\r\n    if (self.isLeftLinkedToRight(leftItem, rightItem)) {\r\n      return $q.when();\r\n    } else {\r\n      var deferred = $q.defer();\r\n      self.__writeLinkToDatabase(leftItem, rightItem).then(function(){\r\n        //will have gone through loadDocumentFromDb so id and doc set, \r\n        var leftEntry = self.__getInitialisedEntry(self.__leftRights, leftItem._id),\r\n            rightEntry = self.__getInitialisedEntry(self.__rightLefts, rightItem._id);\r\n        util.addUnique(leftEntry.items, rightItem);\r\n        util.addUnique(rightEntry.items, leftItem);\r\n        deferred.resolve()\r\n      });\r\n      return deferred.promise; \r\n    };\r\n    \r\n    /*\r\n    Left and right may be absent from register.\r\n    Both registers will always be equal and complimentary:\r\n    {\r\n       p1: {items: [t6]}\r\n       p2: {items: [t4, t6]}\r\n    }\r\n    {\r\n       t6: {items: [p1, p2]},\r\n       t4: {items: [p2]},\r\n    }\r\n    \r\n    */\r\n  };\r\n  \r\n  def.removeLeftRight = function (leftItem, rightItem)    {var self = this;\r\n    //TODO...\r\n  };\r\n   \r\n  def.isLeftLinkedToRight = function (leftItem, rightItem)    {var self = this;\r\n    var leftEntry = self.__leftRights[leftItem._id];\r\n    if (leftEntry) {\r\n      return util.arrayContains(leftEntry.ids, rightItem.id);\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n  //TODO...\r\n    if (collection === self.__rightCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__leftCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n  };\r\n  \r\n  def.__writeLinkToDatabase = function(leftItem, rightItem)  {var self = this;\r\n    // TODO if self.__docsForReuse length, then pop, update, put and loadFromDb. else: createAndLoad.\r\n  };\r\n  \r\n  def.__sendDocumentToReusePile = function(doc)  {var self = this;\r\n    self.__docsForReuse.push(doc);\r\n  };\r\n  \r\n  def.__getInitialisedEntry = function (register, id)  {var self = this;\r\n    var entry = register[id];\r\n    if (entry === undefined) {\r\n      entry = {ids: [], docs: [doc]}\r\n      register[id] = newEntry;\r\n    } else {\r\n      if (entry.items === undefined) {\r\n        var collection = (register === self.__leftRights)? self.__leftCollection : self.__rightCollection; \r\n        entry.items = [];\r\n        angular.forEach(entry.ids, function(id, index) {\r\n          //TODO: discard doc if item doesn't exist?\r\n          entry.items.push(collection.get(id));\r\n        });\r\n      }\r\n    }\r\n    return entry;\r\n  };\r\n  \r\n  def.__loadEntryItems = function(entry, collection) {\r\n    if (entry.items === undefined) {\r\n      entry.items = [];\r\n      angular.forEach(entry.ids, function(id, index) {\r\n        //TODO: discard doc if item doesn't exist.\r\n        entry.items[index] = collection.get(id);\r\n      });\r\n    }\r\n  };\r\n  \r\n  return ManyToManyRelationship;\r\n});","\r\nangular.module('Relate').service('model', function($q, Collection, ParentChildRelationship, ManyToManyRelationship) {\r\n  \r\n  var self= this,\r\n      __db,\r\n      __loadQuery,\r\n      __collections = {},\r\n      __relationships = {},\r\n      __dbDocumentTypeLoaders = {},\r\n      __lastPromiseInQueue = $q.when(),\r\n      __relationshipDefinitionFunctions = {};\r\n  \r\n  self.initialize = function(db, query) {\r\n    __db = db;\r\n    __loadQuery = query || function() {\r\n      return __db.allDocs({\r\n        include_docs: true,\r\n        attachments: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  var __dataReady;\r\n  self.dataReady = function (){\r\n    if (__dataReady === undefined) {\r\n      __dataReady = $q.defer();\r\n      __initializeModel().then( function () {\r\n        m = new ManyToManyRelationship(__db, __collections['project'], __collections['task']);//, {qualifier: 'admin'}\r\n        c.log(m.getAccessFunctionDefinitions());\r\n        __dataReady.resolve();\r\n      });\r\n    }\r\n    return __dataReady.promise;\r\n  };\r\n  \r\n  self.printInfo = function (){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        console.log('model.' + accessFunc.ModelFunctionName);\r\n      });\r\n    });\r\n  };\r\n  \r\n  /************* MODEL DEFINITION FUNCTIONS *************/\r\n  \r\n  self.defineCollection = function(singleItemName, fieldNames, options){\r\n    var collection = new Collection(__db, singleItemName, fieldNames, options);\r\n    __collections[collection.collectionName] = collection;\r\n    __registerDocumentTypeLoader(collection);\r\n    __createAccessFunctions(collection);\r\n    return collection;\r\n  };\r\n  \r\n  self.defineRelationship = function(options){\r\n    var relationshipType = options.type;\r\n    var fn = __relationshipDefinitionFunctions[relationshipType];\r\n    if (typeof fn === 'function') {\r\n      relationship = fn.apply(self, [options]);\r\n      __createAccessFunctions(relationship);\r\n      __relationships[relationship.collectionName] = relationship;\r\n    } else {\r\n      throw '' + options.type +' is not a valid relationship type';\r\n    }\r\n  };\r\n  \r\n  function __createParentChildRelationship(options){\r\n    var parentCollectionName = options.parent;\r\n    var childCollectionName = options.child;\r\n    var parentCollection = __collections[parentCollectionName];\r\n    var childCollection = __collections[childCollectionName];\r\n    return new ParentChildRelationship(__db, parentCollection, childCollection, options);\r\n  };\r\n  __relationshipDefinitionFunctions.parentChild = __createParentChildRelationship;\r\n  \r\n  /************* COLLECTION ACCESS FUNCTIONALITY ************\r\n  \r\n    __createAccessFunctions() creates methods like:\r\n  \r\n      model.newTask({})\r\n      model.getProjectTasks(project)\r\n  \r\n    Query functions (getX, findX) return directly. Data changing functions (all other prefixed) return promises.\r\n    \r\n    Query data may be dirty while a promise is waiting to complete, so you need to do this:\r\n    \r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n    Data changing functions are queued internally, so you can do this.\r\n    model.newTask({});\r\n    model.newTask({});\r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n  */\r\n  self.save = function(item) {\r\n    self.__collections[item.type].saveItem(item);\r\n  };\r\n  \r\n  function __createAccessFunctions(collection){\r\n    angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n      var func;\r\n      if (accessFunc.queuedPromise) {\r\n        func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n      } else {\r\n        func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n      }\r\n      self[accessFunc.ModelFunctionName] = func;\r\n    });\r\n  };\r\n  \r\n  function __createAccessFunctionsOld(){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        var func;\r\n        if (accessFunc.queuedPromise) {\r\n          func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n        } else {\r\n          func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n        }\r\n        self[accessFunc.ModelFunctionName] = func;\r\n      });\r\n    });\r\n  };\r\n  \r\n  function __getNonQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      return collectionFunction.apply(collection, arguments);\r\n    }\r\n  };\r\n  \r\n  function __getQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      var originalArgs = arguments;\r\n      var deferred = $q.defer();\r\n      __lastPromiseInQueue.then( function() {\r\n        __lastPromiseInQueue = collectionFunction.apply(collection, originalArgs);\r\n        __lastPromiseInQueue.then(function(result) {\r\n          deferred.resolve(result);\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n  };\r\n\r\n  /************* INITAL LOADING FUNCTIONALITY *************/\r\n  \r\n  function __registerDocumentTypeLoader(collection){\r\n    var dbDocumentType = collection.dbDocumentType;\r\n    if (dbDocumentType in __dbDocumentTypeLoaders) {\r\n      var claimedBy = __dbDocumentTypeLoaders[dbDocumentType];\r\n      throw 'More than one collection/relationship attempting to register dbDocumentType: \"' + dbDocumentType + '\".';\r\n    } else {\r\n      __dbDocumentTypeLoaders[dbDocumentType] = collection;\r\n    }\r\n  };\r\n  \r\n  function __initializeModel(){\r\n    var defer = $q.defer();\r\n    var loadQuery = __loadQuery();\r\n    loadQuery.then(function (result) {\r\n      angular.forEach(result.rows, function(row){\r\n        __addDocumentToCollection(row.doc);\r\n      });\r\n      __createLinks();\r\n      defer.resolve();\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n    return defer.promise;\r\n  };\r\n  \r\n  function __addDocumentToCollection(document){\r\n    var dbDocumentType = document.type;\r\n    if (dbDocumentType) {\r\n      var collection = __dbDocumentTypeLoaders[dbDocumentType];\r\n      if (collection) {\r\n        collection.loadDocumentFromDb(document, dbDocumentType);\r\n      } else {\r\n        console.log(document);\r\n        console.log('Could not load document \\\"' + document._id + '\\\" as type was not recognised (' + dbDocumentType + ')');\r\n      }\r\n    } else {\r\n      console.log('Could not load document \\\"' + document._id + '\\\" as it has no \\\"type\\\" field.');\r\n    }\r\n  };\r\n  \r\n  function __createLinks() {\r\n    angular.forEach(__relationships, function(relationship) {\r\n      relationship.createLinks();\r\n    });\r\n  }\r\n  \r\n});\r\n\r\n","\r\nangular.module('Relate').factory('ParentChildRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ParentChildRelationship = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__childAlias = options.childAlias || childCollection.plural;\r\n    self.__parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.__keyName = '__' + self.__parentAlias;\r\n    self.__parentDeleteInProgress = new ValueRegister();\r\n    self.__cascadeDelete = options.cascadeDelete || true;\r\n    self.__itemParent = {};\r\n    self.__itemChildren = {};\r\n    parentCollection.registerRelationship(self);\r\n    childCollection.registerRelationship(self, self.__keyName);\r\n  };\r\n  var def = ParentChildRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()  {var self = this;\r\n    var capitalize = util.capitalizeFirstLetter,\r\n        childName = capitalize(self.__childCollection.itemName),\r\n        childAlias = capitalize(self.__childAlias),\r\n        parentName = capitalize(self.__parentCollection.itemName),\r\n        parentAlias = capitalize(self.__parentAlias);\r\n    return [\r\n      util.createAccessFunctionDefinition('get' + childName + parentAlias, self.getParent),\r\n      util.createAccessFunctionDefinition('get' + parentName + childAlias, self.getChildren),\r\n      util.createAccessFunctionDefinition('set' + childName + parentAlias, self.setChildParent),\r\n    ];\r\n  };\r\n  \r\n  def.createLinks = function()  {var self = this;\r\n    var key = self.__keyName;\r\n    angular.forEach(self.__parentCollection.__items, function(parentItem) {\r\n      self.__itemChildren[parentItem._id] = [];\r\n    });\r\n    angular.forEach(self.__childCollection.__items, function(childItem) {\r\n      var parentId = childItem[key];\r\n      if (parentId) {\r\n        var parent = self.__parentCollection.__get__(parentId);\r\n        self.__itemParent[childItem._id] = parent;\r\n        self.__itemChildren[parentId].push(childItem);\r\n      }\r\n    });\r\n  }\r\n  \r\n  def.getParent = function (childItem)    {var self = this;\r\n    return self.__itemParent[childItem._id] || null;\r\n  };\r\n  \r\n  def.getChildren = function (parentItem)    {var self = this;\r\n    return self.__itemChildren[parentItem._id];\r\n  };\r\n  \r\n  def.setChildParent = function (childItem, parentItem)    {var self = this;\r\n    //TODO: assert they are of correct type?\r\n    var oldParent = self.__itemParent[childItem._id],\r\n        parentItemId = parentItem? parentItem._id : null;\r\n    if (oldParent) {\r\n      util.removeFromArray(self.__itemChildren[oldParent._id], childItem);\r\n    }\r\n    if (parentItem) {\r\n      if (self.__itemChildren[parentItem._id] === undefined) {\r\n        self.__itemChildren[parentItem._id] = [childItem];\r\n      } else {\r\n        self.__itemChildren[parentItem._id].push(childItem);\r\n      }\r\n    }\r\n    self.__itemParent[childItem._id] = parentItem;\r\n    childItem[self.__keyName] = parentItemId; \r\n    return self.__childCollection.saveItem(childItem);\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n    if (collection === self.__parentCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__childCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n  };\r\n  \r\n  def.__respondToParentDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__parentDeleteInProgress.set(item, true);\r\n    var childDeletions = [];\r\n    if (self.__cascadeDelete) {\r\n      angular.forEach(self.getChildren(item), function (childItem) {\r\n        childDeletions.push(self.__childCollection.__delete__(childItem));\r\n      });\r\n    }\r\n    //Note that __parentDeleteInProgress will be set to false before promises are all resolved (non critical)\r\n    self.__parentDeleteInProgress.set(item, false);\r\n    $q.all(childDeletions).then(function() {\r\n      self.itemChildrenRegister.respondToParentDeleted(item);\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__respondToChildDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer(),\r\n        childDeletions = [],\r\n        parentItem = self.getParent(item);\r\n    childDeletions.push(self.itemParentRegister.respondToChildDeleted(item));\r\n    /* This is to prevent many calls to unlinking children of a parent when the parent will \r\n    be deleted anyway. Just to save on db writes.\r\n    */\r\n    if (parentItem && !self.__parentDeleteInProgress.get(parentItem)) {\r\n      childDeletions.push(self.itemChildrenRegister.respondToChildDeleted(item));\r\n    }\r\n    $q.all(childDeletions).then(function() {\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ParentChildRelationship;\r\n});","\r\nangular.module('Relate').factory('QueuedResponseDb', function($q, ValueRegister) {\r\n  /*\r\n  post put get remove\r\n  */\r\n  var QueuedResponseDb = function(db) {\r\n    var self = this;\r\n    self._db = db;\r\n    self.queue = {};\r\n    self._nextId = 0;\r\n    self._latestResolvedId = 1;\r\n    \r\n    self.wrapPromise = function(dbCall, data) {\r\n      var promiseId = self.nextId();\r\n      var hiddenPromise = self._db[dbCall](data);\r\n      var returnPromise = $q.defer();\r\n      self.queuePromise(promiseId, returnPromise);\r\n      hiddenPromise.then(function(response) {\r\n        self.promiseGotResolved(promiseId, response);\r\n      });\r\n      return returnPromise.promise;\r\n    };\r\n    angular.forEach(['post', 'put', 'get', 'remove'], function (dbCall) {\r\n      self[dbCall] = function(data) {\r\n        return self.wrapPromise(dbCall, data);\r\n      }\r\n    });\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.nextId = function (){\r\n    this._nextId ++;\r\n    return this._nextId;\r\n  }\r\n  \r\n  QueuedResponseDb.prototype.queuePromise = function(promiseId, returnPromise) {\r\n    this.queue[promiseId] = {\r\n      returnPromise: returnPromise,\r\n      resolved: false\r\n    };\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.promiseGotResolved = function(promiseId, result) {\r\n    var promise = this.queue[promiseId]\r\n    promise['result'] = result;\r\n    promise.resolved = true;\r\n    this.releasResolvedPromises();\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.releasResolvedPromises = function() {\r\n    var stop = false; // encounteredUnresolvedPromiseOrReachedEndOfQueue\r\n    while (!stop) {\r\n      entry = this.queue[this._latestResolvedId]\r\n      if (entry && entry.resolved) {\r\n        entry.returnPromise.resolve(entry.result);\r\n        this._latestResolvedId ++;\r\n      } else {\r\n        stop = true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return QueuedResponseDb;\r\n});","/*\r\nNew way:\r\n\r\nSpecify one relationship per collection.\r\nIt knows of the other collection, and how the relationship behaves.\r\n\r\nThe model is responisble for passing complementary relationships to the collections.\r\n\r\nLinking:\r\n   collection ends up with methods:\r\n   setParent\r\n   addChild\r\n   removeChild\r\n   addTag\r\n   removeTag\r\n   \r\n  model.defineRelationship({type: 'parentChild'... })\r\n    r1 = parentChildRelationship(parent, child)\r\n    r2 = childParentRelationship(parent, child)\r\n    parentCollection.registerRelationship(r1)\r\n    parentCollection.registerRelationship(r2)\r\n    childCollection.registerRelationship(r1)\r\n    childCollection.registerRelationship(r2)\r\n  }\r\n  What does a relationship do:\r\n    create accessor functions (get, set)\r\n    respond to deletions\r\n    respond to new\r\n    \r\n    \r\n  Deletions:\r\n    if has child items: \r\n      delete:\r\n        chilren\r\n        parent of child links \r\n        children of parent\r\n    if has parent items:\r\n      delete:\r\n        parent of child links \r\n        children of parent\r\n    if many to many:\r\n      delete join only\r\n      \r\n    ...but parent child deletions could benefit from not having all the items stripped first. Do I care?\r\n    I could collate operations on the db side (i.e. collect changes to single objects, and flush them after a period)\r\n    \r\n    \r\n      \r\n*/\r\n\r\nangular.module('Relate').factory('ParentRelationshipNew', function($q) {\r\n\r\n  var Relationship = function(propertyName, parentCollection, parentPopertyName) {\r\n    this.propertyName = propertyName;\r\n    this._parentCollection = parentCollection;\r\n    this._parentPopertyName = parentPopertyName;\r\n  };\r\n  \r\n  Relationship.prototype._convertFromDoc = function(doc) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      this._parentCollection.getItem(value);\r\n    }\r\n  };\r\n  \r\n  Relationship.prototype._convertToDoc = function(value) {\r\n    return value.id;\r\n  };\r\n  \r\n  Relationship.prototype._onItemRemove = function(item) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      var parentItem = this._parentCollection.getItem(value);\r\n      if (parentItem) {\r\n        parentItem._links[this._parentPopertyName]\r\n      }\r\n    }\r\n  };\r\n  \r\n});","\r\n\r\n\r\nangular.module('Relate').service('util', function($q) {\r\n  var self = this;\r\n  \r\n  self.capitalizeFirstLetter = function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n  \r\n  self.createAccessFunctionDefinition = function(name, fn, queuedPromise) {\r\n    return {\r\n      ModelFunctionName: name,\r\n      collectionFunction: fn,\r\n      queuedPromise: queuedPromise\r\n    }\r\n  };\r\n    \r\n  self.arrayContains = function(array, item) {\r\n    var l = array.length\r\n    for(var i=0; i <= l; i++) {\r\n      if (item === array[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  self.addUnique = function(array, item) {\r\n    if(!self.arrayContains(array, item)){\r\n      array.push(item);\r\n    }\r\n  }\r\n  \r\n  self.addAsItem = function(object, key, item) {\r\n    //Where object[key] = [items...]\r\n    if (object[key] === undefined) {\r\n      object[key] = [item];\r\n    } else {\r\n      object[key].push(item);\r\n    }\r\n  };\r\n  \r\n  self.removeFromArray = function(array, item) {\r\n    var index = array.indexOf(item);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  };\r\n  \r\n  self.filterIndex = function(index, test) {\r\n    //accepts an object like array.\r\n    var filteredItems = [];\r\n    angular.forEach(index, function(item) {\r\n      if (test(item)) {\r\n        filteredItems.push(item);\r\n      }\r\n    });\r\n    return filteredItems;\r\n  };\r\n  \r\n  self.inheritPrototype = function(Child, Parent) {\r\n    var childProto = Child.prototype;\r\n    var parentProto = Parent.prototype;\r\n    for (var prop in parentProto) {\r\n      if (typeof parentProto[prop] == 'function') {\r\n        childProto[prop] = parentProto[prop];\r\n      }\r\n    }\r\n  };\r\n  \r\n  self.copyFields = function(source, target, fields)    {var self = this;\r\n    angular.forEach(fields, function(field) {\r\n      target[field] = source[field];\r\n    });\r\n  };\r\n  \r\n});\r\n","\r\nangular.module('Relate').factory('ValueRegister', function() {\r\n  //\r\n  var ValueRegister = function() {\r\n    this._register = {};\r\n  };\r\n  ValueRegister.prototype.set = function(key, value) {\r\n    this._register[key] = value;\r\n  };\r\n  ValueRegister.prototype.get = function(key) {\r\n    return this._register[key];\r\n  };\r\n  \r\n  return ValueRegister;\r\n});\r\n"],"sourceRoot":"/source/"}