{"version":3,"sources":["module.js","BaseCollection.js","Collection.js","ItemChildrenRegister.js","ItemParentRegister.js","ManyToManyRelationship.js","model.js","ParentChildRelationship.js","queued-response-db.js","relationship.js","util.js","value-register.js"],"names":["c","console","angular","module","factory","$q","BaseCollection","self","this","__index","__db","dbDocumentType","def","prototype","__postAndLoad","document","defered","defer","type","post","then","result","ok","log","get","id","docFromDb","resolve","loadDocumentFromDb","promise","util","Collection","db","singleItemName","fieldNames","options","itemName","collectionName","plural","__factoryFunction","factoryFunction","__items","__relationships","__fieldNames","slice","__fullFieldNames","push","inheritPrototype","registerRelationship","relationship","fieldName","doc","item","copyFields","_id","getAccessFunctionDefinitions","getFuncDef","action","pluralise","queuedPromise","name","singleName","func","createAccessFunctionDefinition","cap","capitalizeFirstLetter","all","Object","keys","map","i","find","query","test","prop","filterIndex","data","deferred","newItem","save","put","_rev","rev","childDeletions","forEach","respondToItemDeleted","remove","ItemChildrenRegister","parentCollection","childCollection","childAlias","parentAlias","__parentCollection","__childCollection","__cascadeDelete","cascadeDelete","__reverseIndex","parentId","newEntry","childrenIds","childId","getChildren","parentItem","indexEntry","__ensureIndexEntryHasLiveChildren","liveChildren","linkChildToParent","childItem","innerPromise","parentItemId","__unlinkChildFromPreviousParent","__addChildToIndexEntry","respondToParentDeleted","length","debug","respondToChildDeleted","arrayContains","Id","oldParentId","removeFromArray","ItemParentRegister","newIndexEntry","getParent","isUndefined","liveObject","ValueRegister","ManyToManyRelationship","leftCollection","rightCollection","__rightCollection","__leftCollection","defaultDbDocumentTypeName","toLowerCase","__functionNameEnd","qualifier","__leftRights","__rightLefts","capitalize","buildFunc","leftName","leftPlural","rightName","rightPlural","end","getLeftRightsFnName","getRightLeftsFnName","addLeftRightFnName","removeLeftRightFnName","isLeftLinkedToRightFnName","getLeftRights","getRightLefts","addLeftToRight","removeLeftRight","isLeftLinkedToRight","right","left","__updateOneRegisterWithDocument","__sendDocumentToReusePile","register","key","entry","undefined","ids","docs","createLinks","leftItem","__getInitialisedEntry","items","rightItem","addLeftRight","when","__writeLinkToDatabase","leftEntry","rightEntry","addUnique","collection","__respondToParentDeleted","__respondToChildDeleted","__docsForReuse","index","service","ParentChildRelationship","__createParentChildRelationship","parentCollectionName","parent","childCollectionName","child","__collections","__createAccessFunctions","accessFunc","__getQueuedFunction","collectionFunction","__getNonQueuedFunction","ModelFunctionName","apply","arguments","originalArgs","__lastPromiseInQueue","__registerDocumentTypeLoader","__dbDocumentTypeLoaders","__initializeModel","loadQuery","__loadQuery","rows","row","__addDocumentToCollection","__createLinks","err","__relationshipDefinitionFunctions","initialize","allDocs","include_docs","attachments","__dataReady","dataReady","printInfo","join","relationshipType","fn","parentChild","__childAlias","__parentAlias","__keyName","__parentDeleteInProgress","__itemParent","__itemChildren","childName","parentName","setChildParent","oldParent","set","itemChildrenRegister","itemParentRegister","QueuedResponseDb","_db","queue","_nextId","_latestResolvedId","wrapPromise","dbCall","promiseId","nextId","hiddenPromise","returnPromise","queuePromise","response","promiseGotResolved","resolved","releasResolvedPromises","stop","Relationship","propertyName","parentPopertyName","_parentCollection","_parentPopertyName","_convertFromDoc","value","getItem","_convertToDoc","_onItemRemove","_links","string","charAt","toUpperCase","array","l","addAsItem","object","indexOf","splice","filteredItems","Child","Parent","childProto","parentProto","source","target","fields","field","_register"],"mappings":"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","file":"relate.min.js","sourcesContent":["\"use strict\";\r\nvar c = console;\r\n\r\nangular.module('Relate', []);","\r\nangular.module('Relate').factory('BaseCollection', function($q) {\r\n  /*\r\n  A collection has an internal index of the objects in the database.\r\n  What it uses as keys and values is up to the derived class.\r\n  */\r\n  var BaseCollection = function()    {var self = this;\r\n    self.__index = null;\r\n    self.__db = null;\r\n    self.dbDocumentType = null;\r\n  };\r\n  var def = BaseCollection.prototype;\r\n  \r\n  def.__postAndLoad = function(document)    {var self = this;\r\n    var defered = $q.defer();\r\n    document.type = self.dbDocumentType;\r\n    self.__db.post(document).then( function (result) {\r\n      if (result.ok) {\r\n        self.__db.get(result.id).then( function (docFromDb) {        \r\n          defered.resolve(self.loadDocumentFromDb(docFromDb));\r\n        });\r\n      } else {\r\n        console.log(result);\r\n        throw \"Error fetching data\";\r\n      }\r\n    });\r\n    return defered.promise;\r\n  };\r\n  \r\n  return BaseCollection;\r\n});","\r\nangular.module('Relate').factory('Collection', function(util, $q, BaseCollection) {\r\n  \r\n  var Collection = function(db, singleItemName, fieldNames, options)    {var self = this;\r\n    var options = options || {};\r\n    self.itemName = singleItemName;\r\n    self.collectionName = singleItemName; //This is how a relationship references collection\r\n    self.plural = options.plural || singleItemName + 's'\r\n    self.dbDocumentType = options.dbDocumentType || singleItemName;\r\n    self.__db = db;\r\n    self.__factoryFunction = options.factoryFunction || function(){};\r\n    self.__items = {};\r\n    self.__relationships = [];\r\n    self.__fieldNames = fieldNames.slice();\r\n    self.__fullFieldNames = fieldNames.slice();\r\n    self.__fullFieldNames.push('_id');\r\n    self.__fullFieldNames.push('_rev');\r\n  };\r\n  util.inheritPrototype(Collection, BaseCollection);\r\n  var def = Collection.prototype;\r\n\r\n  def.registerRelationship = function(relationship, fieldName)    {var self = this;\r\n    self.__relationships.push(relationship);\r\n    if (fieldName) {\r\n      self.__fullFieldNames.push(fieldName);\r\n    }\r\n  };\r\n\r\n  def.loadDocumentFromDb = function(doc)    {var self = this;\r\n    var item = new self.__factoryFunction();\r\n    util.copyFields(doc, item, self.__fullFieldNames);\r\n    item.type = self.itemName;\r\n    self.__items[doc._id] = item;\r\n    return item;\r\n  };\r\n  \r\n  def.getAccessFunctionDefinitions = function()    {var self = this;\r\n    var cap = util.capitalizeFirstLetter,\r\n        singleName = cap(self.itemName),\r\n        plural = cap(self.plural);\r\n    function getFuncDef(action, pluralise, queuedPromise) {\r\n      var name = pluralise? action + plural : action + singleName,\r\n          func = self[action];\r\n      return util.createAccessFunctionDefinition(name, func, queuedPromise);\r\n    }\r\n    return [\r\n      getFuncDef('new', false, true),\r\n      getFuncDef('get', false, false),\r\n      getFuncDef('find', true, false),\r\n      getFuncDef('all', true, false),\r\n    ]\r\n  };\r\n  \r\n  def.get = function(id)    {var self = this;\r\n    return self.__items[id];\r\n  };\r\n  \r\n  def.all = function()    {var self = this;\r\n    return Object.keys(self.__items).map(function(i){\r\n      return self.__items[i];\r\n    });\r\n  };\r\n\r\n  def.find = function(query)    {var self = this;\r\n    /*\r\n    query can be:\r\n      a function returning true or false\r\n      an object like {name: 'deirdre'} -- which returns items whose properties match.\r\n      an empty object {} -- which returns all items.\r\n    TODO: what about parent properties?\r\n    */\r\n    var test;\r\n    if (typeof query === 'function') {\r\n      test = query;\r\n    } else if (typeof query === 'object') {\r\n      test = function(item) {\r\n        for (prop in query) {\r\n          if (item[prop] !== query[prop]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      throw 'Invalid argument for \"find\", must be an object or a function.';\r\n    }\r\n    return util.filterIndex(self.__items, test);\r\n  };\r\n  \r\n  def.new = function(data)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(data, doc, self.__fieldNames);\r\n    self.__postAndLoad(doc).then(function (newItem) {\r\n      //TODO: link relationships...\r\n      deferred.resolve(newItem);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.save = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var doc = {};\r\n    util.copyFields(item, doc, self.__fullFieldNames);\r\n    self.__db.put(doc).then(function (result) {\r\n      item._rev = result.rev;\r\n      deferred.resolve(item._rev);\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.delete = function(item)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var childDeletions = [];\r\n    angular.forEach(self.__relationships, function(relationship) {\r\n      childDeletions.push(relationship.respondToItemDeleted(item, self));\r\n    });\r\n    $q.all(childDeletions).then(function() {\r\n      self.__db.remove(item).then(function (result) {\r\n        delete self.__items[item._id];\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  return Collection;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemChildrenRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemChildrenRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_child_' + childAlias + 's_of_' + parentAlias;\r\n    self.__db = db;\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__cascadeDelete = options.cascadeDelete || false;\r\n    self.__index = {};//format {parentId: {doc: Object, liveChildren: []}\r\n    self.__reverseIndex = {};//format {childId: parentId}\r\n  };\r\n  util.inheritPrototype(ItemChildrenRegister, BaseCollection);\r\n  var def = ItemChildrenRegister.prototype;\r\n  \r\n  def.loadDocumentFromDb = function(doc)     {var self = this;\r\n    var parentId = doc.parentId;\r\n    if (self.__index[parentId]) {\r\n      throw \"Found duplicate item children link in database.\"\r\n    }\r\n    var newEntry = {doc: doc};\r\n    self.__index[parentId] = newEntry;\r\n    angular.forEach(doc.childrenIds, function (childId) {\r\n      self.__reverseIndex[childId] = parentId;\r\n    });\r\n    return newEntry;\r\n  };\r\n\r\n  def.getChildren = function(parentItem)    {var self = this;\r\n    var indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n      return indexEntry.liveChildren;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[parentItemId],\r\n        innerPromise;\r\n    //Note: parentItemId and indexEntry could rightfully be null/undefined.\r\n    self.__unlinkChildFromPreviousParent(childItem).then(function() {\r\n      self.__reverseIndex[childItem._id] = parentItemId;\r\n      if (indexEntry) {\r\n        innerPromise = self.__addChildToIndexEntry(indexEntry, childItem);\r\n      } else {\r\n        innerPromise = self.__postAndLoad({\r\n          parentId: parentItem._id,\r\n          childrenIds: [childItem._id]\r\n        });\r\n      }\r\n      innerPromise.then(function () {\r\n        deferred.resolve();\r\n      });\r\n    });\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToParentDeleted = function(parentItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    indexEntry = self.__index[parentItem._id];\r\n    if (indexEntry) {\r\n      if (self.__cascadeDelete && indexEntry.doc.childrenIds.length > 0) {\r\n        debug(indexEntry);\r\n        throw 'Cannot delete parent object as it still has children';\r\n      } else {\r\n        self.__db.remove(indexEntry.doc).then(function() {\r\n          delete self.__index[parentItem._id];\r\n          deferred.resolve();\r\n        });\r\n      }\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    return self.__unlinkChildFromPreviousParent(childItem);\r\n  };\r\n\r\n  def.__addChildToIndexEntry = function(indexEntry, childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n    if (util.arrayContains(indexEntry.doc.childrenIds, childItem._id)) {\r\n      deferred.resolve();\r\n    } else {\r\n      indexEntry.doc.childrenIds.push(childItem.Id);\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        indexEntry.liveChildren.push(childItem),\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__unlinkChildFromPreviousParent = function(childItem)    {var self = this;\r\n    var deferred = $q.defer();\r\n    var oldParentId = self.__reverseIndex[childItem._id];\r\n    if (oldParentId) {\r\n      var indexEntry = self.__index[oldParentId];\r\n      util.removeFromArray(indexEntry.doc.childrenIds, childItem._id);\r\n      self.__reverseIndex[childItem._id] = null;\r\n      self.__db.put(indexEntry.doc).then(function() {\r\n        self.__ensureIndexEntryHasLiveChildren(indexEntry);\r\n        util.removeFromArray(indexEntry.liveChildren, childItem);\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n    return deferred.promise;\r\n  };\r\n\r\n  def.__ensureIndexEntryHasLiveChildren = function(indexEntry)    {var self = this;\r\n    var liveChildren = indexEntry.liveChildren;\r\n    if (!liveChildren) {\r\n      var liveChildren = [];\r\n      angular.forEach(indexEntry.doc.childrenIds, function (childId) {\r\n        liveChildren.push(self.__childCollection.get(childId));\r\n      });\r\n      indexEntry.liveChildren = liveChildren;\r\n    }\r\n  };\r\n\r\n  return ItemChildrenRegister;\r\n});\r\n","\r\nangular.module('Relate').factory('ItemParentRegister', function(util, $q, BaseCollection) {\r\n\r\n  var ItemParentRegister = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    var childAlias = options.childAlias || childCollection.itemName;\r\n    var parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.dbDocumentType = 'lnk_parent_' + parentAlias + '_of_' + childAlias;\r\n    self.__db = db;\r\n    self.__index = {};\r\n    self.__parentCollection = parentCollection;\r\n  };\r\n  util.inheritPrototype(ItemParentRegister, BaseCollection);\r\n  var def = ItemParentRegister.prototype;\r\n\r\n  def.loadDocumentFromDb = function(document)    {var self = this;\r\n    if (self.__index[document.childId]) {\r\n      throw \"Found duplicate item parent link in database.\"\r\n    }\r\n    var newIndexEntry = {document: document};\r\n    self.__index[document.childId] = newIndexEntry;\r\n    return newIndexEntry;\r\n  };\r\n  \r\n  def.getParent = function(childItem)    {var self = this;\r\n    var indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      if (angular.isUndefined(indexEntry.liveObject)) {\r\n        indexEntry.liveObject = self.__parentCollection.get(indexEntry.document.parentId) || null;\r\n      }\r\n      return indexEntry.liveObject;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  def.linkChildToParent = function(parentItem, childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        parentItemId = parentItem? parentItem._id : null,\r\n        indexEntry = self.__index[childItem._id];\r\n    if (indexEntry) {\r\n      indexEntry.document.parentId = parentItemId;\r\n      self.__db.put(indexEntry.document).then(function (result) {\r\n        indexEntry.document._rev = result.rev;\r\n        indexEntry.liveObject = parentItem;\r\n        deferred.resolve();\r\n      });\r\n    } else {\r\n      self.__postAndLoad({\r\n        parentId: parentItemId, \r\n        childId: childItem._id\r\n      }).then(function (result) {\r\n        deferred.resolve();\r\n      });      \r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.respondToChildDeleted = function(childItem)    {var self = this;\r\n    var deferred = $q.defer(),\r\n        id = childItem._id,\r\n        indexEntry = self.__index[id];\r\n    if (indexEntry) {\r\n      self.__db.remove(indexEntry.document).then(function (result) {\r\n        delete self.__index[id];\r\n        deferred.resolve();\r\n      });\r\n    }\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ItemParentRegister;\r\n});\r\n\r\n    ","\r\nangular.module('Relate').factory('ManyToManyRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ManyToManyRelationship = function(db, leftCollection, rightCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__rightCollection = rightCollection;\r\n    self.__leftCollection = leftCollection;\r\n    var defaultDbDocumentTypeName = ('lnk_' + leftCollection.itemName + '_' + rightCollection.itemName).toLowerCase();\r\n    self.__functionNameEnd = '';\r\n    if (options.qualifier) {\r\n      self.__functionNameEnd = 'As' + util.capitalizeFirstLetter(options.qualifier);\r\n      defaultDbDocumentTypeName += '_as_' + options.qualifier.toLowerCase();\r\n    }\r\n    self.dbDocumentType = options.dbDocumentType || defaultDbDocumentTypeName;\r\n    self.__db = db;\r\n    self.__leftCollection = leftCollection;\r\n    self.__rightCollection = rightCollection;\r\n    self.__leftRights = {};\r\n    self.__rightLefts = {};\r\n    rightCollection.registerRelationship(self);\r\n    leftCollection.registerRelationship(self);\r\n  };\r\n  var def = ManyToManyRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()  {var self = this;\r\n    var capitalize = util.capitalizeFirstLetter,\r\n        buildFunc = util.createAccessFunctionDefinition,\r\n        leftName = capitalize(self.__leftCollection.itemName),\r\n        leftPlural = capitalize(self.__leftCollection.plural),\r\n        rightName = capitalize(self.__rightCollection.itemName),\r\n        rightPlural = capitalize(self.__rightCollection.plural),\r\n        end = self.__functionNameEnd,\r\n        getLeftRightsFnName = 'get' + leftName + rightPlural + end,\r\n        getRightLeftsFnName = 'get' + rightName + leftPlural + end,\r\n        addLeftRightFnName = 'add' + leftName + rightName + end,\r\n        removeLeftRightFnName = 'remove' + leftName + rightName + end,\r\n        isLeftLinkedToRightFnName = 'is' + leftName + 'LinkedTo' + rightName + end;\r\n    return [\r\n      buildFunc(getLeftRightsFnName, self.getLeftRights),\r\n      buildFunc(getRightLeftsFnName, self.getRightLefts),\r\n      buildFunc(addLeftRightFnName, self.addLeftToRight),\r\n      buildFunc(removeLeftRightFnName, self.removeLeftRight),\r\n      buildFunc(isLeftLinkedToRightFnName, self.isLeftLinkedToRight)\r\n    ];\r\n  };\r\n  \r\n  def.loadDocumentFromDb = function(doc)  {var self = this;\r\n    if (doc.right && doc.left && self.__updateOneRegisterWithDocument(self.__leftRights, doc.left, doc.right)) {\r\n      self.__updateOneRegisterWithDocument(self.__rightLefts, doc.right, doc.left);\r\n    } else {\r\n      self.__sendDocumentToReusePile(doc);\r\n    }\r\n  };\r\n  \r\n  //TODO: should this be nested in loadDocumentFromDb?\r\n  def.__updateOneRegisterWithDocument = function(register, key, id, doc)  {var self = this;\r\n    var entry = register[key];\r\n    if (entry === undefined) {\r\n      register[key] = {ids: [id], docs: [doc]};\r\n    } else {\r\n      if (entry.docs[id]) {\r\n        return false;\r\n      }\r\n      entry.ids.push(id);\r\n      entry.docs[id] = doc;\r\n    }\r\n    return true;\r\n  };\r\n  \r\n  def.createLinks = function()  {var self = this;\r\n    //nothing, we now lazy load.\r\n    /*\r\n    function replaceIdsWithReferences (register, collection) {\r\n      angular.forEach(register, function(entry, key) {\r\n        angular.forEach(entry.ids, function(id, index) {\r\n          //TODO: discard doc if it doesn't exist.\r\n          entry.items[index] = collection.get(id);\r\n        });\r\n      });\r\n    }\r\n    replaceIdsWithReferences(self.__leftRights, self.__rightCollection);\r\n    replaceIdsWithReferences(self.__rightLefts, self.__leftCollection);\r\n    */\r\n  };\r\n  \r\n  def.getLeftRights = function (leftItem)  {var self = this;\r\n    return self.__getInitialisedEntry(self.__leftRights, leftItem._id).items;\r\n  };\r\n  \r\n  def.getRightLefts = function (rightItem)  {var self = this;\r\n    return self.__getInitialisedEntry(self.__rightLefts, rightItem._id).items;\r\n  };\r\n  \r\n  //TODO: assert they are of correct type?\r\n  def.addLeftRight = function (leftItem, rightItem)    {var self = this;\r\n    if (self.isLeftLinkedToRight(leftItem, rightItem)) {\r\n      return $q.when();\r\n    } else {\r\n      var deferred = $q.defer();\r\n      self.__writeLinkToDatabase(leftItem, rightItem).then(function(){\r\n        //will have gone through loadDocumentFromDb so id and doc set, \r\n        var leftEntry = self.__getInitialisedEntry(self.__leftRights, leftItem._id),\r\n            rightEntry = self.__getInitialisedEntry(self.__rightLefts, rightItem._id);\r\n        util.addUnique(leftEntry.items, rightItem);\r\n        util.addUnique(rightEntry.items, leftItem);\r\n        deferred.resolve()\r\n      });\r\n      return deferred.promise; \r\n    };\r\n    \r\n    /*\r\n    Left and right may be absent from register.\r\n    Both registers will always be equal and complimentary:\r\n    {\r\n       p1: {items: [t6]}\r\n       p2: {items: [t4, t6]}\r\n    }\r\n    {\r\n       t6: {items: [p1, p2]},\r\n       t4: {items: [p2]},\r\n    }\r\n    \r\n    */\r\n  };\r\n  \r\n  def.removeLeftRight = function (leftItem, rightItem)    {var self = this;\r\n    //TODO...\r\n  };\r\n   \r\n  def.isLeftLinkedToRight = function (leftItem, rightItem)    {var self = this;\r\n    var leftEntry = self.__leftRights[leftItem._id];\r\n    if (leftEntry) {\r\n      return util.arrayContains(leftEntry.ids, rightItem.id);\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n  //TODO...\r\n    if (collection === self.__rightCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__leftCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n  };\r\n  \r\n  def.__writeLinkToDatabase = function(leftItem, rightItem)  {var self = this;\r\n    // TODO if self.__docsForReuse length, then pop, update, put and loadFromDb. else: createAndLoad.\r\n  };\r\n  \r\n  def.__sendDocumentToReusePile = function(doc)  {var self = this;\r\n    self.__docsForReuse.push(doc);\r\n  };\r\n  \r\n  def.__getInitialisedEntry = function (register, id)  {var self = this;\r\n    var entry = register[id];\r\n    if (entry === undefined) {\r\n      entry = {ids: [], docs: [doc]}\r\n      register[id] = newEntry;\r\n    } else {\r\n      if (entry.items === undefined) {\r\n        var collection = (register === self.__leftRights)? self.__leftCollection : self.__rightCollection; \r\n        entry.items = [];\r\n        angular.forEach(entry.ids, function(id, index) {\r\n          //TODO: what if item doesn't exist?\r\n          var item = collection.get(id);\r\n          if (item) {\r\n            entry.items.push(item);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return entry;\r\n  };\r\n  \r\n  return ManyToManyRelationship;\r\n});","\r\nangular.module('Relate').service('model', function($q, Collection, ParentChildRelationship, ManyToManyRelationship) {\r\n  \r\n  var self= this,\r\n      __db,\r\n      __loadQuery,\r\n      __collections = {},\r\n      __relationships = {},\r\n      __dbDocumentTypeLoaders = {},\r\n      __lastPromiseInQueue = $q.when(),\r\n      __relationshipDefinitionFunctions = {};\r\n  \r\n  self.initialize = function(db, query) {\r\n    __db = db;\r\n    __loadQuery = query || function() {\r\n      return __db.allDocs({\r\n        include_docs: true,\r\n        attachments: false\r\n      });\r\n    }\r\n  };\r\n  \r\n  var __dataReady;\r\n  self.dataReady = function (){\r\n    if (__dataReady === undefined) {\r\n      __dataReady = $q.defer();\r\n      __initializeModel().then( function () {\r\n        __dataReady.resolve();\r\n      });\r\n    }\r\n    return __dataReady.promise;\r\n  };\r\n  \r\n  self.printInfo = function (){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        console.log('model.' + accessFunc.ModelFunctionName);\r\n      });\r\n    });\r\n  };\r\n  \r\n  /************* MODEL DEFINITION FUNCTIONS *************/\r\n  \r\n  self.collection = function(singleItemName, fieldNames, options){\r\n    var collection = new Collection(__db, singleItemName, fieldNames, options);\r\n    __collections[collection.collectionName] = collection;\r\n    __registerDocumentTypeLoader(collection);\r\n    __createAccessFunctions(collection);\r\n    return collection;\r\n  };\r\n  \r\n  self.join = function(options){\r\n    var relationshipType = options.type || 'parentChild';\r\n    var fn = __relationshipDefinitionFunctions[relationshipType];\r\n    if (typeof fn === 'function') {\r\n      relationship = fn.apply(self, [options]);\r\n      __createAccessFunctions(relationship);\r\n      __relationships[relationship.collectionName] = relationship;\r\n    } else {\r\n      throw '' + options.type +' is not a valid relationship type';\r\n    }\r\n  };\r\n  \r\n  function __createParentChildRelationship(options){\r\n    var parentCollectionName = options.parent;\r\n    var childCollectionName = options.child;\r\n    var parentCollection = __collections[parentCollectionName];\r\n    var childCollection = __collections[childCollectionName];\r\n    return new ParentChildRelationship(__db, parentCollection, childCollection, options);\r\n  };\r\n  __relationshipDefinitionFunctions.parentChild = __createParentChildRelationship;\r\n  \r\n  \r\n  //m = new ManyToManyRelationship(__db, __collections['project'], __collections['task']);//, {qualifier: 'admin'}\r\n  \r\n  /************* COLLECTION ACCESS FUNCTIONALITY ************\r\n  \r\n    __createAccessFunctions() creates methods like:\r\n  \r\n      model.newTask({})\r\n      model.getProjectTasks(project)\r\n  \r\n    Query functions (getX, findX) return directly. Data changing functions (all other prefixed) return promises.\r\n    \r\n    Query data may be dirty while a promise is waiting to complete, so you need to do this:\r\n    \r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n    Data changing functions are queued internally, so you can do this.\r\n    model.newTask({});\r\n    model.newTask({});\r\n    model.newTask({}).then(function(){\r\n      angular.copy($scope.tasks, model.getProjectTasks($scope.project));\r\n    });\r\n    \r\n  */\r\n  self.save = function(item) {\r\n    __collections[item.type].save(item);\r\n  };\r\n  \r\n  self.delete = function(item) {\r\n    __collections[item.type].delete(item);\r\n  };\r\n  \r\n  function __createAccessFunctions(collection){\r\n    angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n      var func;\r\n      if (accessFunc.queuedPromise) {\r\n        func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n      } else {\r\n        func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n      }\r\n      self[accessFunc.ModelFunctionName] = func;\r\n    });\r\n  };\r\n  \r\n  function __createAccessFunctionsOld(){\r\n    angular.forEach(__collections, function(collection) {\r\n      angular.forEach(collection.getAccessFunctionDefinitions(), function(accessFunc) {\r\n        var func;\r\n        if (accessFunc.queuedPromise) {\r\n          func = __getQueuedFunction(collection, accessFunc.collectionFunction);\r\n        } else {\r\n          func = __getNonQueuedFunction(collection, accessFunc.collectionFunction);\r\n        }\r\n        self[accessFunc.ModelFunctionName] = func;\r\n      });\r\n    });\r\n  };\r\n  \r\n  function __getNonQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      return collectionFunction.apply(collection, arguments);\r\n    }\r\n  };\r\n  \r\n  function __getQueuedFunction(collection, collectionFunction){\r\n    return function() {\r\n      var originalArgs = arguments;\r\n      var deferred = $q.defer();\r\n      __lastPromiseInQueue.then( function() {\r\n        __lastPromiseInQueue = collectionFunction.apply(collection, originalArgs);\r\n        __lastPromiseInQueue.then(function(result) {\r\n          deferred.resolve(result);\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n  };\r\n\r\n  /************* INITAL LOADING FUNCTIONALITY *************/\r\n  \r\n  function __registerDocumentTypeLoader(collection){\r\n    var dbDocumentType = collection.dbDocumentType;\r\n    if (dbDocumentType in __dbDocumentTypeLoaders) {\r\n      var claimedBy = __dbDocumentTypeLoaders[dbDocumentType];\r\n      throw 'More than one collection/relationship attempting to register dbDocumentType: \"' + dbDocumentType + '\".';\r\n    } else {\r\n      __dbDocumentTypeLoaders[dbDocumentType] = collection;\r\n    }\r\n  };\r\n  \r\n  function __initializeModel(){\r\n    var defer = $q.defer();\r\n    var loadQuery = __loadQuery();\r\n    loadQuery.then(function (result) {\r\n      angular.forEach(result.rows, function(row){\r\n        __addDocumentToCollection(row.doc);\r\n      });\r\n      __createLinks();\r\n      defer.resolve();\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n    return defer.promise;\r\n  };\r\n  \r\n  function __addDocumentToCollection(document){\r\n    var dbDocumentType = document.type;\r\n    if (dbDocumentType) {\r\n      var collection = __dbDocumentTypeLoaders[dbDocumentType];\r\n      if (collection) {\r\n        collection.loadDocumentFromDb(document, dbDocumentType);\r\n      } else {\r\n        console.log(document);\r\n        console.log('Could not load document \\\"' + document._id + '\\\" as type was not recognised (' + dbDocumentType + ')');\r\n      }\r\n    } else {\r\n      console.log('Could not load document \\\"' + document._id + '\\\" as it has no \\\"type\\\" field.');\r\n    }\r\n  };\r\n  \r\n  function __createLinks() {\r\n    angular.forEach(__relationships, function(relationship) {\r\n      relationship.createLinks();\r\n    });\r\n  }\r\n  \r\n});\r\n\r\n","\r\nangular.module('Relate').factory('ParentChildRelationship', function($q, ItemParentRegister, ItemChildrenRegister, ValueRegister, util) {\r\n  \r\n  var ParentChildRelationship = function(db, parentCollection, childCollection, options)    {var self = this;\r\n    var options = options || {};\r\n    self.__parentCollection = parentCollection;\r\n    self.__childCollection = childCollection;\r\n    self.__childAlias = options.childAlias || childCollection.plural;\r\n    self.__parentAlias = options.parentAlias || parentCollection.itemName;\r\n    self.__keyName = '__' + self.__parentAlias;\r\n    self.__parentDeleteInProgress = new ValueRegister();\r\n    self.__cascadeDelete = options.cascadeDelete || true;\r\n    self.__itemParent = {};\r\n    self.__itemChildren = {};\r\n    parentCollection.registerRelationship(self);\r\n    childCollection.registerRelationship(self, self.__keyName);\r\n  };\r\n  var def = ParentChildRelationship.prototype;\r\n  \r\n  def.getAccessFunctionDefinitions = function()  {var self = this;\r\n    var capitalize = util.capitalizeFirstLetter,\r\n        buildFunc = util.createAccessFunctionDefinition,\r\n        childName = capitalize(self.__childCollection.itemName),\r\n        childAlias = capitalize(self.__childAlias),\r\n        parentName = capitalize(self.__parentCollection.itemName),\r\n        parentAlias = capitalize(self.__parentAlias);\r\n    return [\r\n      buildFunc('get' + childName + parentAlias, self.getParent),\r\n      buildFunc('get' + parentName + childAlias, self.getChildren),\r\n      buildFunc('set' + childName + parentAlias, self.setChildParent),\r\n    ];\r\n  };\r\n  \r\n  def.createLinks = function()  {var self = this;\r\n    var key = self.__keyName;\r\n    angular.forEach(self.__parentCollection.__items, function(parentItem) {\r\n      self.__itemChildren[parentItem._id] = [];\r\n    });\r\n    angular.forEach(self.__childCollection.__items, function(childItem) {\r\n      var parentId = childItem[key];\r\n      if (parentId) {\r\n        var parent = self.__parentCollection.get(parentId);\r\n        self.__itemParent[childItem._id] = parent;\r\n        self.__itemChildren[parentId].push(childItem);\r\n      }\r\n    });\r\n  }\r\n  \r\n  def.getParent = function (childItem)    {var self = this;\r\n    return self.__itemParent[childItem._id] || null;\r\n  };\r\n  \r\n  def.getChildren = function (parentItem)    {var self = this;\r\n    return self.__itemChildren[parentItem._id];\r\n  };\r\n  \r\n  def.setChildParent = function (childItem, parentItem)    {var self = this;\r\n    //TODO: assert they are of correct type?\r\n    var oldParent = self.__itemParent[childItem._id],\r\n        parentItemId = parentItem? parentItem._id : null;\r\n    if (oldParent) {\r\n      util.removeFromArray(self.__itemChildren[oldParent._id], childItem);\r\n    }\r\n    if (parentItem) {\r\n      if (self.__itemChildren[parentItem._id] === undefined) {\r\n        self.__itemChildren[parentItem._id] = [childItem];\r\n      } else {\r\n        self.__itemChildren[parentItem._id].push(childItem);\r\n      }\r\n    }\r\n    self.__itemParent[childItem._id] = parentItem;\r\n    childItem[self.__keyName] = parentItemId; \r\n    return self.__childCollection.save(childItem);\r\n  };\r\n  \r\n  def.respondToItemDeleted = function (item, collection)     {var self = this;\r\n    if (collection === self.__parentCollection) {\r\n      return self.__respondToParentDeleted(item);\r\n    } else if (collection === self.__childCollection) {\r\n      return self.__respondToChildDeleted(item);\r\n    } else {\r\n      throw \"Called respondToItemDeleted from wrong collection.\"\r\n    }\r\n  };\r\n  \r\n  def.__respondToParentDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer();\r\n    self.__parentDeleteInProgress.set(item, true);\r\n    var childDeletions = [];\r\n    if (self.__cascadeDelete) {\r\n      angular.forEach(self.getChildren(item), function (childItem) {\r\n        childDeletions.push(self.__childCollection.delete(childItem));\r\n      });\r\n    }\r\n    //Note that __parentDeleteInProgress will be set to false before promises are all resolved (non critical)\r\n    self.__parentDeleteInProgress.set(item, false);\r\n    $q.all(childDeletions).then(function() {\r\n      self.itemChildrenRegister.respondToParentDeleted(item);\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  def.__respondToChildDeleted = function (item)     {var self = this;\r\n    var deferred = $q.defer(),\r\n        childDeletions = [],\r\n        parentItem = self.getParent(item);\r\n    childDeletions.push(self.itemParentRegister.respondToChildDeleted(item));\r\n    /* This is to prevent many calls to unlinking children of a parent when the parent will \r\n    be deleted anyway. Just to save on db writes.\r\n    */\r\n    if (parentItem && !self.__parentDeleteInProgress.get(parentItem)) {\r\n      childDeletions.push(self.itemChildrenRegister.respondToChildDeleted(item));\r\n    }\r\n    $q.all(childDeletions).then(function() {\r\n      deferred.resolve();\r\n    });\r\n    return deferred.promise;\r\n  };\r\n  \r\n  return ParentChildRelationship;\r\n});","\r\nangular.module('Relate').factory('QueuedResponseDb', function($q, ValueRegister) {\r\n  /*\r\n  post put get remove\r\n  */\r\n  var QueuedResponseDb = function(db) {\r\n    var self = this;\r\n    self._db = db;\r\n    self.queue = {};\r\n    self._nextId = 0;\r\n    self._latestResolvedId = 1;\r\n    \r\n    self.wrapPromise = function(dbCall, data) {\r\n      var promiseId = self.nextId();\r\n      var hiddenPromise = self._db[dbCall](data);\r\n      var returnPromise = $q.defer();\r\n      self.queuePromise(promiseId, returnPromise);\r\n      hiddenPromise.then(function(response) {\r\n        self.promiseGotResolved(promiseId, response);\r\n      });\r\n      return returnPromise.promise;\r\n    };\r\n    angular.forEach(['post', 'put', 'get', 'remove'], function (dbCall) {\r\n      self[dbCall] = function(data) {\r\n        return self.wrapPromise(dbCall, data);\r\n      }\r\n    });\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.nextId = function (){\r\n    this._nextId ++;\r\n    return this._nextId;\r\n  }\r\n  \r\n  QueuedResponseDb.prototype.queuePromise = function(promiseId, returnPromise) {\r\n    this.queue[promiseId] = {\r\n      returnPromise: returnPromise,\r\n      resolved: false\r\n    };\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.promiseGotResolved = function(promiseId, result) {\r\n    var promise = this.queue[promiseId]\r\n    promise['result'] = result;\r\n    promise.resolved = true;\r\n    this.releasResolvedPromises();\r\n  };\r\n  \r\n  QueuedResponseDb.prototype.releasResolvedPromises = function() {\r\n    var stop = false; // encounteredUnresolvedPromiseOrReachedEndOfQueue\r\n    while (!stop) {\r\n      entry = this.queue[this._latestResolvedId]\r\n      if (entry && entry.resolved) {\r\n        entry.returnPromise.resolve(entry.result);\r\n        this._latestResolvedId ++;\r\n      } else {\r\n        stop = true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return QueuedResponseDb;\r\n});","/*\r\nNew way:\r\n\r\nSpecify one relationship per collection.\r\nIt knows of the other collection, and how the relationship behaves.\r\n\r\nThe model is responisble for passing complementary relationships to the collections.\r\n\r\nLinking:\r\n   collection ends up with methods:\r\n   setParent\r\n   addChild\r\n   removeChild\r\n   addTag\r\n   removeTag\r\n   \r\n  model.join({type: 'parentChild'... })\r\n    r1 = parentChildRelationship(parent, child)\r\n    r2 = childParentRelationship(parent, child)\r\n    parentCollection.registerRelationship(r1)\r\n    parentCollection.registerRelationship(r2)\r\n    childCollection.registerRelationship(r1)\r\n    childCollection.registerRelationship(r2)\r\n  }\r\n  What does a relationship do:\r\n    create accessor functions (get, set)\r\n    respond to deletions\r\n    respond to new\r\n    \r\n    \r\n  Deletions:\r\n    if has child items: \r\n      delete:\r\n        chilren\r\n        parent of child links \r\n        children of parent\r\n    if has parent items:\r\n      delete:\r\n        parent of child links \r\n        children of parent\r\n    if many to many:\r\n      delete join only\r\n      \r\n    ...but parent child deletions could benefit from not having all the items stripped first. Do I care?\r\n    I could collate operations on the db side (i.e. collect changes to single objects, and flush them after a period)\r\n    \r\n    \r\n      \r\n*/\r\n\r\nangular.module('Relate').factory('ParentRelationshipNew', function($q) {\r\n\r\n  var Relationship = function(propertyName, parentCollection, parentPopertyName) {\r\n    this.propertyName = propertyName;\r\n    this._parentCollection = parentCollection;\r\n    this._parentPopertyName = parentPopertyName;\r\n  };\r\n  \r\n  Relationship.prototype._convertFromDoc = function(doc) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      this._parentCollection.getItem(value);\r\n    }\r\n  };\r\n  \r\n  Relationship.prototype._convertToDoc = function(value) {\r\n    return value.id;\r\n  };\r\n  \r\n  Relationship.prototype._onItemRemove = function(item) {\r\n    var value = doc[this.propertyName];\r\n    if (value) {\r\n      var parentItem = this._parentCollection.getItem(value);\r\n      if (parentItem) {\r\n        parentItem._links[this._parentPopertyName]\r\n      }\r\n    }\r\n  };\r\n  \r\n});","\r\n\r\n\r\nangular.module('Relate').service('util', function($q) {\r\n  var self = this;\r\n  \r\n  self.capitalizeFirstLetter = function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n  \r\n  self.createAccessFunctionDefinition = function(name, fn, queuedPromise) {\r\n    return {\r\n      ModelFunctionName: name,\r\n      collectionFunction: fn,\r\n      queuedPromise: queuedPromise\r\n    }\r\n  };\r\n    \r\n  self.arrayContains = function(array, item) {\r\n    var l = array.length\r\n    for(var i=0; i <= l; i++) {\r\n      if (item === array[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  self.addUnique = function(array, item) {\r\n    if(!self.arrayContains(array, item)){\r\n      array.push(item);\r\n    }\r\n  }\r\n  \r\n  self.addAsItem = function(object, key, item) {\r\n    //Where object[key] = [items...]\r\n    if (object[key] === undefined) {\r\n      object[key] = [item];\r\n    } else {\r\n      object[key].push(item);\r\n    }\r\n  };\r\n  \r\n  self.removeFromArray = function(array, item) {\r\n    var index = array.indexOf(item);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  };\r\n  \r\n  self.filterIndex = function(index, test) {\r\n    //accepts an object like array.\r\n    var filteredItems = [];\r\n    angular.forEach(index, function(item) {\r\n      if (test(item)) {\r\n        filteredItems.push(item);\r\n      }\r\n    });\r\n    return filteredItems;\r\n  };\r\n  \r\n  self.inheritPrototype = function(Child, Parent) {\r\n    var childProto = Child.prototype;\r\n    var parentProto = Parent.prototype;\r\n    for (var prop in parentProto) {\r\n      if (typeof parentProto[prop] == 'function') {\r\n        childProto[prop] = parentProto[prop];\r\n      }\r\n    }\r\n  };\r\n  \r\n  self.copyFields = function(source, target, fields)    {var self = this;\r\n    angular.forEach(fields, function(field) {\r\n      target[field] = source[field];\r\n    });\r\n  };\r\n  \r\n});\r\n","\r\nangular.module('Relate').factory('ValueRegister', function() {\r\n  //\r\n  var ValueRegister = function() {\r\n    this._register = {};\r\n  };\r\n  ValueRegister.prototype.set = function(key, value) {\r\n    this._register[key] = value;\r\n  };\r\n  ValueRegister.prototype.get = function(key) {\r\n    return this._register[key];\r\n  };\r\n  \r\n  return ValueRegister;\r\n});\r\n"],"sourceRoot":"/source/"}